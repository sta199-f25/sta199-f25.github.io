---
title: Lab 3
subtitle: A pivot and a join walk into a pipe...
description: "Due: End of lab on Mon, Sep 15"
categories: Lab
filters:
  - ../remove-fmt-skip.lua
draft: true
---

# Introduction

In this lab you'll get to practice your data tidying skills, specifically reshaping data with pivot functions and bringing two data frames together with join functions.

Make sure to upload your completed lab to Gradescope **by the end of your lab session** and commit and push your final version to GitHub.

## Getting started

By now you should be familiar with how to get started with a lab assignment by cloning the GitHub repo for the assignment.

<details>
<summary>Click to expand if you need a refresher on how to get started with a lab assignment.</summary>

-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.
-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.
-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.
    Click on the repo with the prefix **lab-3**.
    It contains the starter documents you need to complete the homework.
-   Click on the green **CODE** button, select **Use SSH**.
    Click on the clipboard icon to copy the repo URL.
-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.
</details>

Open the *lab-3.qmd* template Quarto file and update the `authors` field to add your name first (first and last) and then your teammates' names (first and last).
Render the document.
Examine the rendered document and make sure your and your teammates' names are updated in the document.
Commit and push your changes with a meaningful commit message and push to GitHub.

<details>
<summary>Click to expand if you need a refresher on assignment guidelines.</summary>
{{< include _guidelines.qmd >}}
</details>

# Packages

In this lab we will work with the **tidyverse** package.

```{r}
#| eval: true
#| message: false
library(tidyverse)
```

# Questions

## Question 1

**Pivot longer and wider.**

a.  For this part, you will work with the following dataset called `df_1a`.

```{r}
#| eval: true
# fmt: skip
df_1a <- tribble(
  ~student_id, ~math_score, ~english_score,
  "S1",        90,          92,
  "S2",        85,          80,
  "S3",        88,          85,
  "S4",        95,          74
)

df_1a
```

It has three variables (`student_id`, `math_score`, and `english_score`) and four rows (one for each student).

Before writing any code, answer the following questions:

- Suppose you want to reshape the data frame so that there is one row per student per subject.
  What function would you use to do this?

- If you reshaped the data to have one row per student per subject, 
  - how many rows would the resulting data frame have?
  - how many columns would the resulting data frame have and what would the column names be?

Then, write the code to reshape the data frame as described above. 

::: render-commit-push
Render, commit, and push your changes to GitHub with a succinct and informative commit message.

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

b.  For this part, you will work with the following dataset called `df_1b`.

```{r}
#| eval: true
# fmt: skip
df_1b <- tribble(
  ~patient_id, ~measurement_time_, ~systolic_bp,
  "P1", "Morning", 120,
  "P1", "Noon", 115,
  "P1", "Evening", 123,
  "P2", "Morning", 118,
  "P2", "Evening", 121
)

df_1b
```

It has three variables (`patient_id`, `measurement_time_`, and `systolic_bp` -- short for systolic blood pressure) and five rows (one per patient per measurement time).

Before writing any code, answer the following questions:

- Suppose you want to reshape the data frame so that there is one row per patient and measurements at different times of the day are recorded in different columns.
  What function would you use to do this?

- If you reshaped the data to have one row per patient, 
  - how many rows would the resulting data frame have?
  - how many columns would the resulting data frame have and what would the column names be?

Then, write the code to reshape the data frame as described above. What does the `NA` value mean in the resulting data frame?

::: render-commit-push
Render, commit, and push your changes to GitHub with a succinct and informative commit message.

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

## Question 2

For this question, you will work with the following dataset called `df_2` as well as the student scores dataset from Question 1a (`df_1a`), and join them with various join functions.
Since both data frames have a variable called `student_id`, that is the variable that will be used to join the two data frames.

```{r}
#| eval: true
# fmt: skip
df_2 <- tribble(
  ~student_id, ~graduation_year,
  "S1",        2023,
  "S3",        2023,
  "S5",        2025,
  "S6",        2024
)

df_2
```

a.  Don't write any code yet: Suppose you run `left_join(df_1a, df_2)`. How many rows and columns would the resulting data frame have? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.

b.  Don't write any code yet: Suppose you run `right_join(df_1a, df_2)`. How many rows and columns would the resulting data frame have? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.

c.  Start with the code this time. Run `inner_join(df_1a, df_2)`. How many rows and columns does the resulting data frame have? Explain why.

d.  Start with the code this time. Run `anti_join(df_1a, df_2)`. How many rows and columns does the resulting data frame have? Explain why.

e.  Don't write any code yet: Suppose you run `anti_join(df_2, df_1a)` -- note the different order of data frames. Which observation(s) would be in the resulting data frame? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.

f.  Don't write any code yet: Suppose you run `full_join(df_1a, df_2)`. How many rows and columns would the resulting data frame have? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.

::: render-commit-push
Render, commit, and push your changes to GitHub with a succinct and informative commit message.

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

# Wrap-up

::: callout-warning
Before you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.
We will be checking these to make sure you have been practicing how to commit and push changes.
:::

## Submission

By now you should also be familiar with how to submit your assignment in Gradescope.

<details>
<summary>Click to expand if you need a refresher on how to get started with a lab assignment.</summary>
{{< include _submission.qmd >}}
</details>

## Grading and feedback

-   This lab is worth 30 points:
    -   10 points for being in lab and turning in *something* -- no partial credit for this part.
    -   20 points for:
        -   answering the questions correctly -- there is partial credit for this part.
        -   following the workflow -- there is partial credit for this part.
-   The workflow points are for:
    -   committing at least three times as you work through your lab,
    -   having your final version of `.qmd` and `.pdf` files in your GitHub repository, and
    -   overall organization.
-   You'll receive feedback on your lab on Gradescope within a week.

Good luck, and have fun with it!
