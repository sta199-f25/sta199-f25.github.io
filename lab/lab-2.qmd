---
title: Lab 2
subtitle: Get in teams then `group_by()`
description: "Due: End of lab on Mon, Sep 15"
categories: Lab
draft: true
---

# Introduction

This lab is a deep dive into `group_by()`!

## Getting started

To get started, follow the instructions below.

-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.
-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.
-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.
    Click on the repo with the prefix **lab-2**.
    It contains the starter documents you need to complete the homework.
-   Click on the green **CODE** button, select **Use SSH**.
    Click on the clipboard icon to copy the repo URL.
-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.

Then, click *lab-2.qmd* to open the template Quarto file and update the `authors` field to add your name first (first and last) and then your teammates' names (first and last).
Render the document.
If you get a popup window error, click "Try again".
Examine the rendered document and make sure your name is updated in the document.
Commit and push your changes with a meaningful commit message and push to GitHub.

## Guidelines

{{< include _guidelines.qmd >}}

# Packages

In this lab we will work with the **tidyverse** package.

```{r}
#| eval: true
#| message: false
library(tidyverse)
```

-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package to make its features (the functions and datasets in it) be accessible from your *Console*.
-   Then, **render** the document which loads this package to make its features (the functions and datasets in it) be available for other code cells in your Quarto document.

# Questions

## Question 1

Grouping by one variable.

The following dataframe is used:

```{r}
df <- tibble(
  var_1 = c(50, 20, 70, 10, 100, 30, 40, 80, 120, 60, 90, 110),
  var_2 = c("Pizza", "Burger", "Pizza", "Pizza", "Burger", "Burger",
            "Burger", "Pizza", "Burger", "Pizza", "Pizza", "Burger"),
  var_3 = c("Apple", "Apple", "Pear", "Banana", "Pear", "Banana",
            "Apple", "Apple", "Pear", "Pear", "Banana", "Banana")
)

df
```

a.  What does the following code chunk do? Run it, analyze the result, and articulate in words what `arrange()` does.

```{r}
#| eval: false
df |>
  arrange(var_2)
```

b.  What does the following code chunk do? Run it and analyze the result and articulate in words what `group_by()` does.

```{r}
#| eval: false
df |>
  group_by(var_2)
```

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Q1, parts a and b".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

c.  What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does.

```{r}
#| eval: false
df |>
  group_by(var_2) |>
  summarize(mean_var_1 = mean(var_1))
```

d.  Compare this behavior to the following code chunk. Run it, analyze the result, and articulate in words what the pipeline does, and how it's behavior is different from part (c).

```{r}
#| eval: false
df |>
  summarize(mean_var_1 = mean(var_1))
```

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Finished Q1".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

## Question 2

Grouping by two variables.

a.  How many levels does `var_2` have?
    How many levels does `var_3`have?
    How many possible combinations are there of the levels of `var_2` and `var_3`?

b.  What does the following code chunk do?
    Run it and analyze the result and articulate in words what the pipeline does.
    Then, comment on what the message says.

```{r}
#| eval: false
df |>
  group_by(var_2, var_3) |>
  summarize(mean_var_1 = mean(var_1))
```

c.  What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does, especially mentioning what the `.groups` argument does. How is the output different from the one in part (b)?

```{r}
#| eval: false
df |>
  group_by(var_2, var_3) |>
  summarize(mean_var_1 = mean(var_1), .groups = "drop")
```

d.  What do the following pipelines do? Run both and analyze their results and articulate in words what each pipeline does. How are the outputs of the two pipelines different?

```{r}
#| eval: false
df |>
  group_by(var_2, var_3) |>
  summarize(mean_var_1 = mean(var_1), .groups = "drop")

df |>
  group_by(var_2, var_3) |>
  mutate(mean_var_1 = mean(var_1))
```

::: render-commit-push
Render, commit, and push your changes to GitHub with a meaningful commit message.
&nbsp;
<br>
<br>
:::

# Wrap-up

::: callout-warning
Before you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.
We will be checking these to make sure you have been practicing how to commit and push changes.
:::

## Submission

{{< include _submission.qmd >}}

## Grading and feedback

-   This lab is worth 30 points:
    -   10 points for being in lab and turning in *something* -- no partial credit for this part.
    -   20 points for:
        -   answering the questions correctly -- there is partial credit for this part.
        -   following the workflow -- there is partial credit for this part.
-   The workflow points are for:
    -   committing at least three times as you work through your lab,
    -   having your final version of `.qmd` and `.pdf` files in your GitHub repository, and
    -   overall organization.
-   You'll receive feedback on your lab on Gradescope within a week.

Good luck, and have fun with it!