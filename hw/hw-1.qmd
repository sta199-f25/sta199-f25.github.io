---
title: HW 1
subtitle: Exploring NC Counties
description: "Due: Sun, Sep 14, 11:59 pm"
categories: HW
draft: true
---

# Introduction

This is a two-part homework assignment:

- **Part 1 -- ü§ñ Feedback from AI:** Not graded, for practice, you get immediate feedback with AI. Complete in `hw-1-part-1.qmd`, no submission required.

- **Part 2 -- üßëüèΩ‚Äçüè´ Feedback from Humans:** Graded, you get feedback from the course instructional team within a week. Complete in `hw-1-part-2.qmd`, submit on Gradescope.

To get started, follow the instructions below.

-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.
-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.
-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.
    Click on the repo with the prefix **hw-1**.
    It contains the starter documents you need to complete the homework.
-   Click on the green **CODE** button, select **Use SSH**.
    Click on the clipboard icon to copy the repo URL.
-   In RStudio, go to *File* ‚ûõ *New Project* ‚ûõ*Version Control* ‚ûõ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.

## Guidelines

The guidelines should feel familiar, as they are the same ones from the lab! They are included below as a reminder.

{{< include _guidelines.qmd >}}

# Part 1 -- Feedback from AI

Your answers to the questions in this part should go in the file `hw-1-part-1.qmd`.

## Instructions

[TO DO: Add instructions for AI feedback tool.]

## Packages

In this part you will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a "tidy" way.

```{r}
#| eval: true
#| message: false
library(tidyverse)
```

## Data

We will use the `midwest` data frame for this lab.
It is part of the **ggplot2** R package, so the `midwest` data set is automatically loaded when you load the tidyverse package.

The data contains demographic characteristics of counties in the Midwest region of the United States.

Because the data set is part of the **ggplot2** package, you can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.

## Questions

### Question 1

Visualize the distribution of population density of counties using a histogram with `geom_histogram()` with four separate binwidths: a binwidth of 100, a binwidth of 1,000, a binwidth of 10,000, and a binwidth of 100,000.
For example, you can create the first plot with:

```{r}
ggplot(midwest, aes(x = popdensity)) +
  geom_histogram(binwidth = 100) +
  labs(
    x = "Population density",
    y = "Count",
    title = "Population density of Midwestern counties",
    subtitle = "Binwidth = 100"
  )
```

You will need to make four different histograms.
Make sure to set informative titles and axis labels for each of your plots.
Then, comment on which binwidth is most appropriate for these data and why.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 1".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 2

Visualize the distribution of population density of counties again, this time using a boxplot with `geom_boxplot()`.
Make sure to set informative titles and axis labels for your plot.
Then, using information as needed from the box plot as well as the histogram from Question 1, describe the distribution of population density of counties and comment on any potential outliers, making sure to identify at least one county that is a clear outlier by name in your narrative and commenting on whether it makes sense to you that this county is an outlier.
You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.

::: callout-important
In describing a distribution, make sure to mention shape, center, spread, and any unusual observations.
:::

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 2".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 3

Create a scatterplot of the percentage below poverty (`percbelowpoverty` on the y-axis) versus percentage of people with a college degree (`percollege` on the x-axis), where the color [**and**]{.underline} shape of points are determined by `state`.
Make sure to set informative titles, axis, and legend labels for your plot.
First, describe the overall relationship between percentage of people with a college degree and percentage below poverty in Midwestern states, making sure to identify at least one county that is a clear outlier by name in your narrative.
You can use the data viewer to identify the outliers interactively, you do not have to write code to identify them.
Then, comment on whether you can identify how this relationship varies across states.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 3".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 4

*Do some states have counties that tend to be geographically larger than others?*

To explore this question, create side-by-side boxplots of area (`area`) of a county based on state (`state`).

How do typical county area sizes compare across states?

How do variabilities of county sizes compare across states?

Which state has the single largest county? Identify the name of this county. You can use the data viewer to identify it interactively, you do not have to write code.

::: render-commit-push
Now is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.

Once again, make sure to commit and push all changed files so that your Git pane is empty afterwards.
:::

### Question 5

*Do some states have a higher percentage of their counties located in a metropolitan area?*

Create a segmented bar chart with one bar per state and the bar filled with colors according to the value of `metro` ‚Äì one color indicating `Yes` and the other color indicating `No` for whether a county is considered to be a metro area.
The y-axis of the segmented barplot should range from 0 to 1, indicating proportions.
Compare the percentage of counties in metro areas across the states based on this plot.
Make sure to supplement your narrative with rough estimates of these percentages.

::: callout-tip
## Hint

For this question, you should begin with the data wrangling pipeline below.
We will learn more about data wrangling in the coming weeks, so this is a mini-preview.
This pipeline creates a new variable called `metro` based on the value of the existing variable called `inmetro`.
If the value of `inmetro` is equal to 1 (`inmetro == 1`), it sets the value of `metro` to `"Yes"`, and if not, it sets the value of `metro` to `"No"`.
The resulting data frame is assigned back to `midwest`, overwriting the existing `midwest` data frame with a version that includes the new `metro` variable.

```{r}
#| label: hint
#| eval: false
midwest <- midwest |>
  mutate(metro = if_else(inmetro == 1, "Yes", "No"))
```
:::

::: render-commit-push
Now is another good time to render, commit, and push your changes to GitHub with a meaningful commit message.

And once again, make sure to commit and push all changed files so that your Git pane is empty afterward.
We keep repeating this because it's important and because we see students forget to do this.
So take a moment to make sure you're following along with the version control instructions.
:::

# Part 2 -- Feedback from Humans
