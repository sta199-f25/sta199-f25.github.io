---
title: HW 2
subtitle: Deeper dive into Midwest and NC Counties
description: "Due: Sun, Sep 21, 11:59 pm"
categories: HW
draft: false
---

# Introduction

This is a two-part homework assignment:

- **Part 1 -- ü§ñ Feedback from AI:** Not graded, for practice, you get immediate feedback with AI, based on rubrics designed by the course instructor. Complete in `hw-1-part-1.qmd`, no submission required.

- **Part 2 -- üßëüèΩ‚Äçüè´ Feedback from Humans:** Graded, you get feedback from the course instructional team within a week. Complete in `hw-1-part-2.qmd`, submit on Gradescope.

To get started, follow the instructions below.

-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.
-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.
-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.
    Click on the repo with the prefix **hw-1**.
    It contains the starter documents you need to complete the homework.
-   Click on the green **CODE** button, select **Use SSH**.
    Click on the clipboard icon to copy the repo URL.
-   In RStudio, go to *File* ‚ûõ *New Project* ‚ûõ*Version Control* ‚ûõ *Git*.
-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.
-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.

## Guidelines

The guidelines should feel familiar, as they are the same ones from the lab! They are included below as a reminder.

{{< include _guidelines.qmd >}}

# Part 1 -- Feedback from AI

Your answers to the questions in this part should go in the file `hw-1-part-1.qmd`.

## Instructions

Write your answer to each question in the appropriate section of the `hw-1-part-1.qmd` file.
Then, highlight your answer to a question, click on _Addins > AIFEEDR > Get feedback_.
In the app that opens, select the appropriate homework number (1) and question number.
Then click on _Get Feedback_.
Please be patient, feedback generation can take a few seconds. 
Once you read the feedback, you can go back to your Quarto document to improve your answer based on the feedback. 
You will then need to click the red X on the top left corner of the Viewer pane to stop the feedback app from running before you can re-render your Quarto document.

The video below demonstrates how to use the AI feedback tool.

{{< video https://www.youtube.com/embed/EyT6QQN1ouQ?si=DsG-laE30BykMJby title="aifeedr">}}

## Packages

In this part you will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a "tidy" way.

```{r}
#| eval: true
#| message: false
library(tidyverse)
```

## Data

We will use the `midwest` data frame once again for this homework.
The data contains demographic characteristics of counties in the Midwest region of the United States.
Because the data set is part of the **ggplot2** package, you can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.

## Questions

### Question 1

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 1".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 2

TO DO: Add Q.

::: callout-important
In describing a distribution, make sure to mention shape, center, spread, and any unusual observations.
:::

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 2".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 3

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 3".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 4

TO DO: Add Q.

::: render-commit-push
Now is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.

Once again, make sure to commit and push all changed files so that your Git pane is empty afterwards.
:::

### Question 5

TO DO: Add Q.

::: render-commit-push
Now is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.

And once again, make sure to commit and push all changed files so that your Git pane is empty afterward.
We keep repeating this because it's important and because we see students forget to do this.
So take a moment to make sure you're following along with the version control instructions.
:::

# Part 2 -- Feedback from Humans

Your answers to the questions in this part should go in the file `hw-2-part-2.qmd`.

## Question 6

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 6".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

## Questions 7-10 -- Exploring NC Counties

### Packages

You will use the **tidyverse** package for data wrangling and visualization, **scales** for better axis labels, and **ggthemes** for additional color palettes.

```{r}
#| eval: true
#| message: false
library(tidyverse)
library(scales)
library(ggthemes)
```

### Data

For the remaining questions on the homework, you will continue use data on counties in North Carolina that you used in Lab 1.

As a reminder, the dataset contains information on North Carolina counties retrieved from the 2020 Census as well as from [myFutureNC Dashboard](https://dashboard.myfuturenc.org/county-data-and-resources/) maintained by Carolina Demography at the University of North Carolina at Chapel Hill.

This dataset is stored in a file called `nc-county.csv` in the `data` folder of your project/repository.

The variables in the dataset and their descriptions are as follows:

-   `county`: Name of county.
-   `land_area_m2`: Land area of county in meters-squared, based on the 2020 census.
-   `land_area_mi2`: Land area of county in miles-squared, based on the 2020 census.
-   `pop_2020`: Population of county, based on the 2020 Census.
-   `pop_dens_2020`: Population density calculated as population (`pop_2020`) divided by land area in miles-squared (people per mile-squared).
-   `county_type`: Peer county type classification based on population characteristics, socioeconomic status, and geographic features used for grouping counties with similar demographic, social, and economic characteristics, allowing them to be compared and benchmarked against one another.
-   `median_hh_income`: Median household income.
-   `p_foreign_born`: Percentage of population that is foreign-born.
-   `p_child_poverty`: Percentage of children living in poverty.
-   `p_single_parent_hh`: Percentage of households with children that are single-parent households.
-   `p_broadband`: Percentage of households with broadband internet access.
-   `p_home_ownership`: Percentage of homes that are owner-occupied.
-   `p_family_sustaining_wage`: Percentage of adults that earn a family-sustaining wage -- typically a wage that covers essential costs like housing, food, childcare, transportation, and healthcare for a family's basic needs within a specific geographic area
-   `p_edu_lths`: Percentage of 25-44-year-olds with less than a high school diploma.
-   `p_edu_hsged`: Percentage of 25-44-year-olds with a high school diploma or equivalent.
-   `p_edu_scnd`: Percentage of 25-44-year-olds with some college or an associate degree.
-   `p_edu_ndc`: Percentage of 25-44-year-olds with non-degree credentials -- certifications, licenses, or other credentials that demonstrate specific skills or knowledge but do not confer a formal academic degree.
-   `p_edu_assoc`: Percentage of 25-44-year-olds with an associate degree.
-   `p_edu_ba`: Percentage of 25-44-year-olds with a bachelor's degree.
-   `p_edu_mapl`: Percentage of 25-44-year-olds with a master's, professional, or doctoral degree.
-   `p_edu_hs_grad_rate`: High school graduation rate.
-   `p_edu_chronic_absent_rate`: Chronic absenteeism rate.

Just like in lab, you can read this file into R with the following code:

```{r}
#| eval: false
nc_county <- read_csv("data/nc-county.csv")
```

```{r}
#| include: false
nc_county <- read_csv(here::here("data/nc-county.csv"))
```

### Question 7

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with the commit message "Added answer for Question 7".

Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

### Question 8

TO DO: Add Q.

::: render-commit-push
Now is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.
:::

### Question 9

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with an informative and concise commit message.
:::

### Question 10

TO DO: Add Q.

::: render-commit-push
Render, commit, and push your changes to GitHub with an informative and concise commit message.
Make sure to commit and push all changed files so that your Git pane is empty afterward.
:::

# Wrap-up

::: callout-warning
Before you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.
We will be checking these to make sure you have been practicing how to commit and push changes.
:::

## Submission

{{< include _submission.qmd >}}

## Grading and feedback

-   Questions 1-5 are not graded, but you should complete them to get practice.

-   Questions 6-10 are graded, and you will receive feedback on Gradescope from the course instructional team within a week.
    -   Questions will be graded for accuracy and completeness.
    -   Partial credit will be given where appropriate.
    -   There are also workflow points for:
        - committing at least three times as you work through your lab,
        - having your final version of `.qmd` and `.pdf` files in your GitHub repository, and
        - overall organization.
