{
  "hash": "5cb995d0e3ff4179826718fb503a1333",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 1\nsubtitle: Exploring NC Counties\ndescription: \"Due: End of lab on Mon, Sep 8\"\ncategories: Lab\ndraft: true\n---\n\n# Introduction\n\nThis lab will introduce you to the course computing workflow.\nOne of the mail goals of this lab is to reinforce our demo of R and RStudio, which we will be using throughout the course both to learn the statistical concepts discussed in the course and to analyze real data and come to informed conclusions.\nThe other main goal is meet other students in the class, get to know them, and work together with them.\n\n::: callout-note\nR is the name of the programming language itself and RStudio is a convenient interface, commonly referred to as an integrated development environment or an IDE, for short.\n:::\n\nAn additional goal is to reinforce Git and GitHub, the version control, web hosting, and collaboration systems that we will be using throughout the course.\n\n::: callout-note\nGit is a version control system (like \"Track Changes\" features from Microsoft Word but more powerful) and GitHub is the home for your Git-based projects on the internet (like DropBox but much better).\n:::\n\nAs the labs progress, you are encouraged to explore beyond what the labs dictate; a willingness to experiment will make you a much better programmer.\nBefore we get to that stage, however, you need to build some basic fluency in R.\nToday we begin with the fundamental building blocks of R and RStudio: the interface, reading in data, and basic commands.\n\n::: callout-warning\nThis lab assumes that you have already completed [Lab 0](lab-0.html).\nIf you have not, please\n\n-   go back and do that first before proceeding and\n-   let your TA know as they will need to set up a Lab 1 repository for you before you can complete this lab.\n:::\n\n## Learning objectives\n\n-   Gain practice with\n    -  the data science workflow using R, RStudio, Git, and GitHub,\n    -  writing a reproducible report using Quarto, and\n    -  version control using Git and GitHub.\n-   Create data visualizations with the `tidyverse`, specifically using `ggplot2`.\n-   Write a simple data transformation pipeline with the `tidyverse`, specifically using `dplyr`.\n\n## Getting started\n\n### Step 1: Log in to RStudio\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.\n\n#### Refresher: R and R Studio\n\nBelow are the components of the RStudio IDE.\n\n![](images/lab-1/rstudio.png){fig-alt=\"RStudio IDE\" width=\"700\" fig-align=\"center\"}\n\nBelow are the components of a Quarto (.qmd) file.\n\n![](images/lab-1/quarto.png){fig-alt=\"Quarto document\" width=\"700\" fig-align=\"center\"}\n\n### Step 2: Clone the repo & start new RStudio project\n\n-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.\n    Click on the repo with the prefix **lab-1**.\n    It contains the starter documents you need to complete the lab.\n\n-   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).\n    Click on the clipboard icon to copy the repo URL.\n\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n-   Click *lab-1.qmd* to open the template Quarto file.\n    This is where you will write up your code and narrative for the lab.\n\n### Step 3: Update the YAML\n\nThe top portion of your Quarto file (between the three dashed lines) is called **YAML**.\nIt stands for \"YAML Ain't Markup Language\".\nIt is a human-friendly data representation for all programming languages.\nAll you need to know is that this area is called the YAML (we will refer to it as such) and that it contains meta information about your document.\n\n-   Open the Quarto (`.qmd`) file in your project, update the `authors` field to add your name first (first and last) and then your teammates' names (first and last). Then, render the document.\n\n-   If you get a popup window error, click \"Try again\".\n\n-   Examine the rendered document and make sure your name is updated in the document.\n\n### Step 4: Commit your changes\n\n-   Go to the Git pane in RStudio.\n    This will be in the top right hand corner in a separate tab.\n\n    If you have made changes to your Quarto (.qmd) file, you should see it listed here.\n    If you have rendered the document, you should also see its output, a PDF file, listed there.\n\n-   Click on it to select it in this list and then click on **Diff**.\n\n    This shows you the *diff*erence between the last committed state of the document and its current state including changes.\n    You should see deletions in red and additions in green.\n\n-   If you're happy with these changes, prepare the changes to be pushed to your remote repository.\n\n    -   First, **stage** your changes by checking the appropriate box on the files you want to prepare.\n\n    -   Next, write a meaningful commit message (for instance, \"Updated author name\") in the **Commit message** box.\n\n    -   Finally, click **Commit**.\n        Note that every commit needs to have a commit message associated with it.\n\n::: callout-tip\nYou don't have to commit after every change, as this would get quite tedious.\nYou should commit states that are *meaningful to you* for inspection, comparison, or restoration (e.g., restoring a previous version of your document).\n\nIn the first few assignments, we will tell you exactly when to commit and, in some cases, what commit message to use.\nAs the semester progresses, we will let you make these decisions.\n:::\n\n### Step 5: Push your changes\n\nNow that you have made an update and committed this change, it's time to push these changes to your repo on GitHub.\n\n-   In the Git pane, click on Push.\n\n-   Then, make sure all the changes went to GitHub.\n    Go to your GitHub repo in your browser and refresh the page.\n    You should see your commit message next to the updated files.\n    If you see this, all your changes are on GitHub, and you're good to go!\n\n::: callout-warning\nIf you don't see your update, go back to Step 4.\nRemember that in order to push your changes to GitHub, you must have **staged** (checked boxes) your **commit** (with a commit message) to be pushed and then click on **Push**.\n:::\n\n## Guidelines\n\n### Code\n\nCode should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n-   code should be properly indented,\n-   there should be spaces around `=` signs and spaces after commas.\n\nAdditionally, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\n### Plots\n\n-   Plots should have an informative title and, if needed, also a subtitle.\n-   Axes and legends should be labeled with both the variable name and its units (if applicable).\n-   Careful consideration should be given to aesthetic choices.\n\n### Workflow\n\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\n\n-   You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n-   Final versions of both your `.qmd` file and the rendered PDF should be pushed to GitHub.\n\n\n# Packages\n\nIn this lab we will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package to make its features (the functions and datasets in it) be accessible from your *Console*.\n-   Then, **render** the document which loads this package to make its features (the functions and datasets in it) be available for other code cells in your Quarto document.\n\n## Refresher: tidyverse\n\nThe tidyverse is a meta-package.\nWhen you load it you get nine packages loaded for you:\n\n-   **dplyr**: for data wrangling\n-   **forcats**: for dealing with factors\n-   **ggplot2**: for data visualization\n-   **lubridate**: for dealing with dates\n-   **purrr**: for iteration with functional programming\n-   **readr**: for reading and writing data\n-   **stringr**: for string manipulation\n-   **tibble**: for modern, tidy data frames\n-   **tidyr**: for data tidying and rectangling\n\n# Data\n\nFor this lab you will use a dataset on counties in North Carolina.\n\nThe dataset contains information on North Carolina counties retrieved from the 2020 Census as well as from [myFutureNC Dashboard](https://dashboard.myfuturenc.org/county-data-and-resources/) maintained by Carolina Demography at the University of North Carolina at Chapel Hill.\n\nThis dataset is stored in a file called `nc-county.csv` in the `data` folder of your project/repository.\n\nYou can read this file into R with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_county <- read_csv(\"data/nc-county.csv\")\n```\n:::\n\n\n\n\nThis will read the CSV (comma separated values) file from the `data` folder and store the dataset as a data frame called `nc_county` in R.\n\nThe variables in the dataset and their descriptions are as follows:\n\n-   `county`: Name of county.\n-   `land_area_m2`: Land area of county in meters-squared, based on the 2020 census.\n-   `land_area_mi2`: Land area of county in miles-squared, based on the 2020 census.\n-   `pop_2020`: Population of county, based on the 2020 Census.\n-   `pop_dens_2020`: Population density calculated as population (`pop_2020`) divided by land area in miles-squared (people per mile-squared).\n-   `county_type`: Peer county type classification based on population characteristics, socioeconomic status, and geographic features used for grouping counties with similar demographic, social, and economic characteristics, allowing them to be compared and benchmarked against one another.\n-   `median_hh_income`: Median household income.\n-   `p_foreign_born`: Percentage of population that is foreign-born.\n-   `p_child_poverty`: Percentage of children living in poverty.\n-   `p_single_parent_hh`: Percentage of households with children that are single-parent households.\n-   `p_broadband`: Percentage of households with broadband internet access.\n-   `p_home_ownership`: Percentage of households that are owner-occupied.\n-   `p_family_sustaining_wage`: Percentage of adults that earn a family-sustaining wage -- typically a wage that covers essential costs like housing, food, childcare, transportation, and healthcare for a family's basic needs within a specific geographic area\n-   `p_edu_lths`: Percentage of 25-44-year-olds with less than a high school diploma.\n-   `p_edu_hsged`: Percentage of 25-44-year-olds with a high school diploma or equivalent.\n-   `p_edu_scnd`: Percentage of 25-44-year-olds with some college or an associate degree.\n-   `p_edu_ndc`: Percentage of 25-44-year-olds with non-degree credentials -- certifications, licenses, or other credentials that demonstrate specific skills or knowledge but do not confer a formal academic degree.\n-   `p_edu_assoc`: Percentage of 25-44-year-olds with an associate degree.\n-   `p_edu_ba`: Percentage of 25-44-year-olds with a bachelor's degree.\n-   `p_edu_mapl`: Percentage of 25-44-year-olds with a master's, professional, or doctoral degree.\n-   `p_edu_hs_grad_rate`: High school graduation rate.\n-   `p_edu_chronic_absent_rate`: Chronic absenteeism rate.\n\n# Questions\n\n## Question 1\n\na. How many counties are in the dataset? How many variables are there?\nUse inline code to answer this question.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Q1, part a\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\nb. Make two plots: a histogram and a boxplot of the `population` variable. \n\n- Is the distribution of population in NC counties right-skewed, left-skewed, or approximately symmetric? Which plot(s) helped you determine this?\n\n- Is the distribution of population in NC counties unimodal, bimodal, multimodal or uniform? Which plot(s) helped you determine this?\n\n- In a single pipeline, identify the counties with unusually high populations (according to the boxplot) and display their names and populations in descending order of population.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Q1, part b\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Question 2\n\na. Guess what the relationship between population density and land area might be – positive?\nnegative?\nno relationship?\nExplain your reasoning.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with a meaningful commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\nb. Make a scatter plot of population density (`density` on the y-axis) vs. land area in miles-squared (`land_area_mi2` on the x-axis).\nMake sure to set an informative title and axis labels for your plot.\nDescribe the relationship.\nWas your guess correct?\n\n::: render-commit-push\nNow is another good time to render, commit, and push your all your changes to GitHub with a meaningful commit message.\n:::\n\nc. Now make a scatter plot of population density (`density` on the y-axis) vs. land area in meters-squared (`land_area_m2` on the x-axis).\nMake sure to set an informative title and axis labels for your plot.\nComment on how this scatterplot compares to the one in Exercise 8 — is the relationship displayed same or different.\nExplain why.\n\n::: render-commit-push\nRender, commit, and push your all your changes to GitHub with the commit message with a meaningful commit message.\n:::\n\n# Wrap-up\n\n::: callout-warning\nBefore you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n:::\n\n## Submission\n\nSubmit your PDF document to Gradescope by the end of the lab to be considered \"on time\":\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with question. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n:::\n\n\n## Grading and feedback\n\n-   This lab is worth 30 points:\n    - 10 points for being in lab and turning in _something_ -- no partial credit for this part.\n    - 20 points for:\n      - answering the questions correctly -- there is partial credit for this part.\n      - following the workflow -- there is partial credit for this part.\n\n-   The workflow points are for:\n    - committing at least three times as you work through your lab,\n    - having your final version of `.qmd` and `.pdf` files in your GitHub repository, and\n    - overall organization.\n\n-   You'll receive feedback on your lab on Gradescope within a week.\n\nGood luck, and have fun with it!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}