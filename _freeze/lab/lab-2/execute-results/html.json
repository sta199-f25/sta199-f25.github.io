{
  "hash": "418f1a88a7887b30b153616c0cea5147",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 1\nsubtitle: Get in teams then `group_by()`\ndescription: \"Due: End of lab on Mon, Sep 15\"\ncategories: Lab\ndraft: true\n---\n\n# Introduction\n\nThis lab is a deep dive into `group_by()`!\n\n## Getting started\n\n1.  **Log in to RStudio:**\n\n    -   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n    -   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.\n\n2.  **Clone the repo & start new RStudio project:**\n\n    -   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.\n        Click on the repo with the prefix **lab-2**.\n        It contains the starter documents you need to complete the lab.\n\n    -   Click on the green **CODE** button, select **Use SSH** (this might already be selected by default, and if it is, you'll see the text **Clone with SSH**).\n        Click on the clipboard icon to copy the repo URL.\n\n    -   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n\n    -   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n\n    -   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n\n    -   Click *lab-2.qmd* to open the template Quarto file.\n        This is where you will write up your code and narrative for the lab.\n\n3.  **Update the YAML:**\n\n    -   Open the Quarto (`.qmd`) file in your project, update the `authors` field to add your name first (first and last) and then your teammates' names (first and last).\n        Then, render the document.\n\n    -   If you get a popup window error, click \"Try again\".\n\n    -   Examine the rendered document and make sure your name is updated in the document.\n\n4.  **Commit your changes:**\n\n    -   Go to the Git pane in RStudio. This will be in the top right hand corner in a separate tab.\n\n    If you have made changes to your Quarto (.qmd) file, you should see it listed here.\n    If you have rendered the document, you should also see its output, a PDF file, listed there.\n\n    -   Click on it to select it in this list and then click on **Diff**.\n\n    This shows you the *diff*erence between the last committed state of the document and its current state including changes.\n    You should see deletions in red and additions in green.\n\n    -   If you're happy with these changes, prepare the changes to be pushed to your remote repository.\n\n        -   First, **stage** your changes by checking the appropriate box on the files you want to prepare.\n\n        -   Next, write a meaningful commit message (for instance, \"Updated author name\") in the **Commit message** box.\n\n        -   Finally, click **Commit**.\n            Note that every commit needs to have a commit message associated with it.\n\n5.  **Push your changes:**\n\n    -   In the Git pane, click on Push.\n\n    -   Then, make sure all the changes went to GitHub.\n        Go to your GitHub repo in your browser and refresh the page.\n        You should see your commit message next to the updated files.\n        If you see this, all your changes are on GitHub, and you're good to go!\n\n::: callout-warning\nIf you don't see your update, go back to Step 4.\nRemember that in order to push your changes to GitHub, you must have **staged** (checked boxes) your **commit** (with a commit message) to be pushed and then click on **Push**.\n:::\n\n## Guidelines\n\n### Code\n\nCode should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n-   code should be properly indented,\n-   there should be spaces around `=` signs and spaces after commas.\n\nAdditionally, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\n### Plots\n\n-   Plots should have an informative title and, if needed, also a subtitle.\n-   Axes and legends should be labeled with both the variable name and its units (if applicable).\n-   Careful consideration should be given to aesthetic choices.\n\n### Workflow\n\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\n\n-   You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n-   Final versions of both your `.qmd` file and the rendered PDF should be pushed to GitHub.\n\n\n# Packages\n\nIn this lab we will work with the **tidyverse** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n-   **Run** the code cell by clicking on the green triangle (play) button for the code cell labeled `load-packages`. This loads the package to make its features (the functions and datasets in it) be accessible from your *Console*.\n-   Then, **render** the document which loads this package to make its features (the functions and datasets in it) be available for other code cells in your Quarto document.\n\n# Questions\n\n## Question 1\n\nGrouping by one variable.\n\nThe following dataframe is used:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- tibble(\n  var_1 = c(50, 20, 70, 10, 100, 30, 40, 80, 120, 60, 90, 110),\n  var_2 = c(\"Pizza\", \"Burger\", \"Pizza\", \"Pizza\", \"Burger\", \"Burger\",\n            \"Burger\", \"Pizza\", \"Burger\", \"Pizza\", \"Pizza\", \"Burger\"),\n  var_3 = c(\"Apple\", \"Apple\", \"Pear\", \"Banana\", \"Pear\", \"Banana\",\n            \"Apple\", \"Apple\", \"Pear\", \"Pear\", \"Banana\", \"Banana\")\n)\n\ndf\n```\n:::\n\n\na.  What does the following code chunk do? Run it, analyze the result, and articulate in words what `arrange()` does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  arrange(var_2)\n```\n:::\n\n\nb.  What does the following code chunk do? Run it and analyze the result and articulate in words what `group_by()` does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2)\n```\n:::\n\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Q1, parts a and b\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\nc.  What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\nd.  Compare this behavior to the following code chunk. Run it, analyze the result, and articulate in words what the pipeline does, and how it's behavior is different from part (c).\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Finished Q1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Question 2\n\nGrouping by two variables.\n\na.  How many levels does `var_2` have?\n    How many levels does `var_3`have?\n    How many possible combinations are there of the levels of `var_2` and `var_3`?\n\nb.  What does the following code chunk do?\n    Run it and analyze the result and articulate in words what the pipeline does.\n    Then, comment on what the message says.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1))\n```\n:::\n\n\nc.  What does the following code chunk do? Run it and analyze the result and articulate in words what the pipeline does, especially mentioning what the `.groups` argument does. How is the output different from the one in part (a)?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n```\n:::\n\n\nd.  What do the following pipelines do? Run both and analyze their results and articulate in words what each pipeline does. How are the outputs of the two pipelines different?\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  group_by(var_2, var_3) |>\n  summarize(mean_var_1 = mean(var_1), .groups = \"drop\")\n\ndf |>\n  group_by(var_2, var_3) |>\n  mutate(mean_var_1 = mean(var_1))\n```\n:::\n\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with a meaningful commit message.\n&nbsp;\n<br>\n<br>\n:::\n\n# Wrap-up\n\n::: callout-warning\nBefore you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n:::\n\n## Submission\n\nSubmit your PDF document to Gradescope by the end of the lab to be considered \"on time\":\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with question. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n:::\n\n\n## Grading and feedback\n\n-   This lab is worth 30 points:\n    -   10 points for being in lab and turning in *something* -- no partial credit for this part.\n    -   20 points for:\n        -   answering the questions correctly -- there is partial credit for this part.\n        -   following the workflow -- there is partial credit for this part.\n-   The workflow points are for:\n    -   committing at least three times as you work through your lab,\n    -   having your final version of `.qmd` and `.pdf` files in your GitHub repository, and\n    -   overall organization.\n-   You'll receive feedback on your lab on Gradescope within a week.\n\nGood luck, and have fun with it!",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}