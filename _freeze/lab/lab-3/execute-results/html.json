{
  "hash": "1388b791e336814135b3723662235844",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: Lab 3\nsubtitle: A pivot and a join walk into a pipe...\ndescription: \"Due: End of lab on Mon, Sep 15\"\ncategories: Lab\nfilters:\n  - ../remove-fmt-skip.lua\ndraft: true\n---\n\n# Introduction\n\nIn this lab you'll get to practice your data tidying skills, specifically reshaping data with pivot functions and bringing two data frames together with join functions.\n\nMake sure to upload your completed lab to Gradescope **by the end of your lab session** and commit and push your final version to GitHub.\n\n## Getting started\n\nBy now you should be familiar with how to get started with a lab assignment by cloning the GitHub repo for the assignment.\n\n<details>\n<summary>Click to expand if you need a refresher on how to get started with a lab assignment.</summary>\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.\n-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.\n    Click on the repo with the prefix **lab-3**.\n    It contains the starter documents you need to complete the homework.\n-   Click on the green **CODE** button, select **Use SSH**.\n    Click on the clipboard icon to copy the repo URL.\n-   In RStudio, go to *File* ➛ *New Project* ➛*Version Control* ➛ *Git*.\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n</details>\n\nOpen the *lab-3.qmd* template Quarto file and update the `authors` field to add your name first (first and last) and then your teammates' names (first and last).\nRender the document.\nExamine the rendered document and make sure your and your teammates' names are updated in the document.\nCommit and push your changes with a meaningful commit message and push to GitHub.\n\n<details>\n<summary>Click to expand if you need a refresher on assignment guidelines.</summary>\n### Code\n\nCode should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n-   code should be properly indented,\n-   there should be spaces around `=` signs and spaces after commas.\n\nAdditionally, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.[^1]\n\n[^1]: Remember, haikus not novellas when writing code!\n\n### Plots\n\n-   Plots should have an informative title and, if needed, also a subtitle.\n-   Axes and legends should be labeled with both the variable name and its units (if applicable).\n-   Careful consideration should be given to aesthetic choices.\n\n### Workflow\n\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\n\n-   You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n-   Final versions of both your `.qmd` file and the rendered PDF should be pushed to GitHub.\n\n</details>\n\n# Packages\n\nIn this lab we will work with the **tidyverse** package.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# Questions\n\n## Question 1\n\n**Pivot longer and wider.**\n\na.  For this part, you will work with the following dataset called `scores`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\nscores <- tribble(\n  ~student_id, ~math, ~english,\n  \"S1\",        90,    92,\n  \"S2\",        85,    80,\n  \"S3\",        88,    85,\n  \"S4\",        95,    74\n)\n\nscores\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 3\n  student_id  math english\n  <chr>      <dbl>   <dbl>\n1 S1            90      92\n2 S2            85      80\n3 S3            88      85\n4 S4            95      74\n```\n\n\n:::\n:::\n\n\n::: callout-note\nThe `tribble()` function is helpful for creating small data frames (`tibble`s) with an easier to read row-by-row layout.\n:::\n\nIt has three variables (`student_id`, `math`, and `english`) and four rows (one for each student).\n\nBefore writing any code, answer the following questions:\n\n- Suppose you want to reshape the data frame so that there is one row per student per subject.\n  What function would you use to do this?\n\n- If you reshaped the data to have one row per student per subject, \n  - how many rows would the resulting data frame have?\n  - how many columns would the resulting data frame have and what would the column names be?\n\nThen, write the code to reshape the data frame as described above. \n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with a succinct and informative commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\nb.  For this part, you will work with the following dataset called `patients`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\npatients <- tribble(\n  ~patient_id, ~measurement_time_, ~systolic_bp,\n  \"P1\",        \"Morning\",          120,\n  \"P1\",        \"Noon\",             115,\n  \"P1\",        \"Evening\",          123,\n  \"P2\",        \"Morning\",          118,\n  \"P2\",        \"Evening\",          121\n)\n\npatients\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 5 × 3\n  patient_id measurement_time_ systolic_bp\n  <chr>      <chr>                   <dbl>\n1 P1         Morning                   120\n2 P1         Noon                      115\n3 P1         Evening                   123\n4 P2         Morning                   118\n5 P2         Evening                   121\n```\n\n\n:::\n:::\n\n\nIt has three variables (`patient_id`, `measurement_time_`, and `systolic_bp` -- short for systolic blood pressure) and five rows (one per patient per measurement time).\n\nBefore writing any code, answer the following questions:\n\n- Suppose you want to reshape the data frame so that there is one row per patient and measurements at different times of the day are recorded in different columns.\n  What function would you use to do this?\n\n- If you reshaped the data to have one row per patient, \n  - how many rows would the resulting data frame have?\n  - how many columns would the resulting data frame have and what would the column names be?\n\nThen, write the code to reshape the data frame as described above. What does the `NA` value mean in the resulting data frame?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with a succinct and informative commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Question 2\n\nFor this question, you will work with the following dataset called `grad_years` as well as the student scores dataset from Question 1a (`scores`), and join them with various join functions.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\ngrad_years <- tribble(\n  ~id,  ~graduation_year,\n  \"S1\", 2023,\n  \"S3\", 2023,\n  \"S5\", 2025,\n  \"S6\", 2024\n)\n\ngrad_years\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 × 2\n  id    graduation_year\n  <chr>           <dbl>\n1 S1               2023\n2 S3               2023\n3 S5               2025\n4 S6               2024\n```\n\n\n:::\n:::\n\n\na.  Your friend writes the following code to join the `scores` and `grad_years` data frames and gets an error message:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nscores |>\n  left_join(grad_years)\n```\n\n::: {.cell-output .cell-output-error}\n\n```\nError in `left_join()`:\n! `by` must be supplied when `x` and `y` have no common variables.\nℹ Use `cross_join()` to perform a cross-join.\n```\n\n\n:::\n:::\n\n\nWhat does the error message mean and why does it occur? How would you fix the code?\n\nb.  How many rows and columns does the resulting data frame from part(a) have? Explain why.\n\nc.  Don't write any code yet: Suppose you join the two data frames, `scores` and `grad_years` with a `right_join()`, in that order. How many rows and columns would the resulting data frame have? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.\n\nd.  Start with the code this time. Join the two data frames, `scores` and `grad_years` with an `inner_join()`, in that order. How many rows and columns does the resulting data frame have? Explain why.\n\ne.  Don't write any code yet: Suppose you join the two data frames, `grad_years` and `scores` with an `inner_join()` again, but in the reverse order (`grad_years` first, then `scores`). Would you expect the resulting data frame to have the same number of rows as the previous part or a different number of rows? Explain your reasoning. Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.\n\nf.  Don't write any code yet: Suppose you join the two data frames, `scores` and `grad_years` with an `anti_join()`. Which observation(s) would be in the resulting data frame? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.\n\ng.  Don't write any code yet: Suppose you join the two data frames, `grad_years` and `scores` with an `anti_join()` again, but in the reverse order (`grad_years` first, then `scores`). Which observation(s) would be in the resulting data frame? Then, write the code to perform the join. If your guess wasn't correct, discuss with your teammates before proceeding.\n\nh.  Start with the code this time. Join the two data frames, `scores` and `grad_years` with a `full_join()`, in that order. How many rows and columns does the resulting data frame have? Explain why.\n\ni.  You're interested in all students who are in the `scores` data frame and you also need their graduation years. You want to find out which students are missing graduation years. Which join function would you use to achieve this? Write the code to perform the join to confirm your answer.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with a succinct and informative commit message.\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n# Wrap-up\n\n::: callout-warning\nBefore you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n:::\n\n## Submission\n\nBy now you should also be familiar with how to submit your assignment in Gradescope.\n\n<details>\n<summary>Click to expand if you need a refresher on how to get started with a lab assignment.</summary>\n\nSubmit your PDF document to Gradescope by the end of the lab to be considered \"on time\":\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with question. All the pages of your lab should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n:::\n\n\n</details>\n\n## Grading and feedback\n\n-   This lab is worth 30 points:\n    -   10 points for being in lab and turning in *something* -- no partial credit for this part.\n    -   20 points for:\n        -   answering the questions correctly -- there is partial credit for this part.\n        -   following the workflow -- there is partial credit for this part.\n-   The workflow points are for:\n    -   committing at least three times as you work through your lab,\n    -   having your final version of `.qmd` and `.pdf` files in your GitHub repository, and\n    -   overall organization.\n-   You'll receive feedback on your lab on Gradescope within a week.\n\nGood luck, and have fun with it!\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}