{
  "hash": "8ee58580deb7e77ef4f49b9a7683c444",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Grammar of data visualization\"\nsubtitle: \"Lecture 3\"\ndate: \"2025-09-02\"\nformat: \n  revealjs: \n    output-file: 03-grammar-of-data-visualization-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    toc: false\n  html: \n    code-link: true\n---\n\n# Warm-up\n\n## Announcements {.smaller}\n\n-   Office hours are posted on the course website!\n\n-   If you can follow along with today's application exercise steps, great!\n    If something doesn't work as expected, ask me/TA during the exercise.\n    We'll either:\n\n    -   help you on the spot and get you unstuck or\n    -   identify that you're missing an earlier step, ask you to follow along with your neighbor, and visit office hours before Thursday for one-on-one help\n\n## Outline {.smaller}\n\n-   Last time:\n\n    -   We introduced you to the course toolkit.\n\n    -   You **cloned** your `ae` repositories and started making some updates in your Quarto documents.\n\n    -   You **committed and pushed** your changes back -- at least most of you did!\n\n. . .\n\n-   Today:\n\n    -   You will wrap up that application exercis, and commit and push your final changes.\n\n    -   We will introduce data visualization.\n\n    -   You will **pull** to get today's application exercise file.\n\n    -   You will work on the new application exercise on data visualization, **commit** your changes, and **push** them.\n\n# From last time\n\n## Tour: Quarto (and more Git + GitHub) {.smaller .scrollable}\n\n::: appex\n**Option 2:**\n\nGo to RStudio and open the document `ae-01-income-inequality.qmd`.\n:::\n\n<br>\n\n<details>\n<summary>Tour recap: Quarto</summary>\n\n![](images/03/tour-quarto.png){fig-alt=\"RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code cell.\" fig-align=\"center\"}\n\n</details>\n\n<br>\n\n<details>\n<summary>Tour recap: Git + GitHub</summary>\n\nOnce we made changes to our Quarto document, we\n\n- went to the Git pane in RStudio\n\n- staged our changes by clicking the checkboxes next to the relevant files\n\n- committed our changes with an informative commit message\n\n- pushed our changes to our application exercise repos\n\n- confirmed on GitHub that we could see our changes pushed from RStudio\n\n</details>\n\n## How will we use Quarto?\n\n-   Every application exercise, lab, project, etc. is an Quarto document\n-   You'll always have a template Quarto document to start with\n-   The amount of scaffolding in the template will decrease over the semester\n\n## What's with all the hexes?\n\n![](images/03/hexes.jpeg){fig-alt=\"Hex logos for many packages\" fig-align=\"center\"}\n\n## We have hexes too!\n\n::: task\nGrab one before you leave!\n:::\n\n::: center-align\n![](images/logo.png){fig-alt=\"STA 199 hex logo\"}\n:::\n\n# Data visualization\n\n## Participate ðŸ“±ðŸ’» {.smaller}\n\n::: {.columns}\n\n::: {.column width=\"70%\"}\n\n::: wooclap\nRemember this visualization from the code along video -- what was it about?\n:::\n\n![](images/03/un-data-viz.png)\n\n:::\n\n::: {.column width=\"30%\"}\n\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n\n\n:::\n\n::: \n\n## Let' see... {.center}\n\n::: {.hand .large}\nhow the sausage is made!\n:::\n\n## Load packages\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(unvotes)\nlibrary(tidyverse)\nlibrary(ggthemes)\n```\n:::\n\n\n## Prepare the data {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_uk_tr_votes <- un_votes |>\n  inner_join(un_roll_calls, by = \"rcid\") |>\n  inner_join(un_roll_call_issues, by = \"rcid\", relationship = \"many-to-many\") |>\n  filter(country %in% c(\"United Kingdom\", \"United States\", \"Turkey\")) |>\n  mutate(year = year(date)) |>\n  group_by(country, year, issue) |>\n  summarize(percent_yes = mean(vote == \"yes\"), .groups = \"drop\")\n```\n:::\n\n\n::: callout-note\nLet's leave these details aside for a bit, we'll revisit this code at a later point in the semester.\nFor now, let's agree that we need to do some \"data wrangling\" to get the data into the right format for the plot we want to create.\nJust note that we called the data frame we'll visualize `us_uk_tr_votes`.\n:::\n\n## View the data {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nus_uk_tr_votes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1,212 Ã— 4\n   country  year issue                        percent_yes\n   <chr>   <dbl> <fct>                              <dbl>\n 1 Turkey   1946 Colonialism                        0.8  \n 2 Turkey   1946 Economic development               0.6  \n 3 Turkey   1946 Human rights                       0    \n 4 Turkey   1947 Colonialism                        0.222\n 5 Turkey   1947 Economic development               0.5  \n 6 Turkey   1947 Palestinian conflict               0.143\n 7 Turkey   1948 Colonialism                        0.417\n 8 Turkey   1948 Arms control and disarmament       0    \n 9 Turkey   1948 Economic development               0.375\n10 Turkey   1948 Human rights                       0.167\n# â„¹ 1,202 more rows\n```\n\n\n:::\n:::\n\n\n## Visualize the data\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# code to visualize the data\n```\n:::\n\n\n\n::: {.cell layout-align=\"center\"}\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/un-data-viz-1.png){fig-align='center' width=864}\n:::\n:::\n\n\n## Step 1. Prepare a canvas for plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = us_uk_tr_votes)\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-1-1.png){width=864}\n:::\n:::\n\n\n## Step 2. Map variables to aesthetics {.smaller}\n\n*Map* `year` to the `x` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = us_uk_tr_votes, mapping = aes(x = year))\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-2-1.png){width=864}\n:::\n:::\n\n\n## Step 3. Map variables to aesthetics {.smaller}\n\n*Map* `percent_yes` to the `y` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-3-1.png){width=864}\n:::\n:::\n\n\n## Mapping and aesthetics {.smaller}\n\n-   **Aesthetics** are visual properties of a plot\n\n-   In the *grammar of graphics*, variables from the data frame are **map**ped to aesthetics\n\n![](images/03/aesthetic-mapping.gif){fig-align=\"center\"}\n\n## Argument names {.smaller}\n\nIt's common practice in R to omit the names of first two arguments of a function:\n\n. . .\n\n-   Instead of:\n\n``` r\nggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))\n```\n\n-   We usually write:\n\n``` r\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes))\n```\n\n## Step 4. Represent data on your canvas {.smaller}\n\nwith a `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-4-1.png){width=864}\n:::\n:::\n\n\n## Step 5. Map variables to aesthetics {.smaller}\n\n*Map* `country` to the `color` *aesthetic*\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point()\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-5-1.png){width=864}\n:::\n:::\n\n\n## Step 6. Represent data on your canvas {.smaller}\n\nwith another `geom`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-6-1.png){width=864}\n:::\n:::\n\n\n## Warnings and messages\n\n-   Adding `geom_smooth()` resulted in the following warning:\n\n```         \n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n```\n\n. . .\n\n-   It tells us the type of smoothing ggplot2 does under the hood when drawing the smooth curves that represent trends for each country.\n\n. . .\n\n-   Going forward we'll suppress this warning to save some space.\n\n## Step 7. Split plot into facets\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|4\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue)\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-7-1.png){width=864}\n:::\n:::\n\n\n## Step 8. Use a different color scale\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|5\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-8-1.png){width=864}\n:::\n:::\n\n\n## Step 9. Apply a different theme\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal()\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-9-1.png){width=864}\n:::\n:::\n\n\n## Step 10. Add labels\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|7\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point() +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-10-1.png){width=864}\n:::\n:::\n\n\n## Participate ðŸ“±ðŸ’» {.smaller}\n\n::: {.columns}\n\n::: {.column width=\"70%\"}\n\n::: wooclap\nWhich of the following modifications will change the transparency of the points in the plot?\n:::\n\n![](images/03/un-data-viz.png)\n\n:::\n\n::: {.column width=\"30%\"}\n\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n\n\n:::\n\n::: \n\n## Step 11. Set transparency of points\n\nwith `alpha`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth() +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-11-1.png){width=864}\n:::\n:::\n\n\n## Step 12. Hide standard errors of curves\n\nwith `se = FALSE`\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|3\"}\nggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +\n  geom_point(alpha = 0.5) +\n  geom_smooth(se = FALSE) +\n  facet_wrap(~issue) +\n  scale_color_colorblind() +\n  theme_minimal() +\n  labs(x = \"Year\", y = \"% yes\", color = \"Country\")\n```\n\n::: {.cell-output-display}\n![](03-grammar-of-data-visualization_files/figure-revealjs/step-12-1.png){width=864}\n:::\n:::\n\n\n## Grammar of graphics {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\nWe built a plot layer-by-layer\n\n-   just like described in the book *The Grammar of Graphics* and\n-   implemented in the **ggplot2** package, the data visualization package of the tidyverse.\n:::\n\n::: {.column width=\"20%\"}\n![](images/03/gg-book.png)\n:::\n\n::: {.column width=\"30%\"}\n![](images/03/gg-layers.png)\n:::\n:::\n\n# Application exercise\n\n## `ae-02-bechdel-dataviz` {.smaller}\n\n::: appex\n-   Go to your `ae` project in RStudio.\n-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n-   If you haven't yet done so, click **Pull** to get today's application exercise file.\n-   Work through the application exercise in class, and **render, commit, and push** your edits by the end of class.\n:::\n\n## Recap {.smaller}\n\n-   Construct plots with `ggplot()`.\n-   Layers of ggplots are separated by `+`s.\n-   The formula is (almost) always as follows:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +\n  geom_XXX()\n```\n:::\n\n",
    "supporting": [
      "03-grammar-of-data-visualization_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}