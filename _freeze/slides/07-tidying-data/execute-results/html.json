{
  "hash": "1707df30e1c9415437db2ab308c4dc8f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Tidying data\"\nsubtitle: \"Lecture 7\"\ndate: \"2025-09-16\"\nauthor: \"Guest lecture by Marie Neubrander <br><br>Dr. Mine Ã‡etinkaya-Rundel\"\nformat: \n  revealjs: \n    output-file: 07-tidying-data-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    pdf-separate-fragments: true\n    toc: false\n  html: \n    code-link: true\n---\n\n\n\n# Warm-up\n\n## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}\n\n\n\n\n\n::: columns\n::: {.column width=\"85%\"}\n::: wooclap\nWhich of the following plots does this code produce?\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_boxplot(aes(color = gerry)) +\n  geom_beeswarm()\n```\n:::\n\n\n\n::: {.cell layout-ncol=\"2\"}\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-5-1.png){width=480}\n:::\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-5-2.png){width=480}\n:::\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-5-3.png){width=480}\n:::\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-5-4.png){width=480}\n:::\n:::\n\n:::\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n## Announcements {.smaller}\n\n::: incremental\n-   If you haven't turned in HW 1, you received an email reminding you that you homework may be submitted up to 72 hours after the deadline, with a 5% deduction for each 24-hour period it is late. More info on late policy on syllabus.\n\n-   Don't forget to review your Lab 1 feedback on Gradescope, even if you didn't miss any points on it.\n\n-   Great job with questions on Ed and office hours, keep it up!\n\n-   I will hold office hours today after class!\n:::\n\n## Recap: layering geoms {.scrollable .smaller}\n\n::: columns\n::: {.column width=\"60%\"}\n::: task\nUpdate the following code to create the visualization on the right.\n:::\n:::\n\n::: {.column width=\"40%\"}\n![](images/07/gerrymander-recreate-2.png)\n:::\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_boxplot(aes(color = gerry)) +\n  geom_beeswarm()\n```\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-6-1.png){width=960}\n:::\n:::\n\n\n## Recap: layering geoms {.smaller}\n\n0.  Original Code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_boxplot(aes(color = gerry)) +\n  geom_beeswarm() \n```\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-7-1.png){width=960}\n:::\n:::\n\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 500px;\n  right: -15px;\n  width: 413px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/07/gerrymander-recreate-2.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Recap: layering geoms {.smaller}\n\n1.  Swap the order of the two geoms.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_beeswarm() +\n  geom_boxplot(aes(color = gerry))\n```\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 500px;\n  right: -15px;\n  width: 413px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/07/gerrymander-recreate-2.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Recap: layering geoms {.smaller}\n\n2.  Make the boxplots semi-transparent.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_beeswarm() +\n  geom_boxplot(aes(color = gerry), alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-9-1.png){width=960}\n:::\n:::\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 500px;\n  right: -15px;\n  width: 413px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/07/gerrymander-recreate-2.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Recap: layering geoms {.smaller}\n\n3.  Remove the legend.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(gerrymander, aes(x = gerry, y = clinton16)) +\n  geom_beeswarm() +\n  geom_boxplot(aes(color = gerry), alpha = 0.5, show.legend = FALSE)\n```\n\n::: {.cell-output-display}\n![](07-tidying-data_files/figure-revealjs/unnamed-chunk-10-1.png){width=960}\n:::\n:::\n\n\n<!-- small Venn diagram in the bottom-right -->\n<div style=\"\n  position: absolute;\n  bottom: 500px;\n  right: -15px;\n  width: 413px;           /* adjust to taste */\n  pointer-events: none;  /* so it never steals clicks */\n\">\n  <img src=\"images/07/gerrymander-recreate-2.png\" style=\"width: 100%; height: auto;\" />\n</div>\n\n\n## Recap: logical operators {.smaller}\n\nGenerally useful in a `filter()` but will come up in various other places as well...\n\n| operator | definition                    |\n|:---------|:------------------------------|\n| `<`      | [is less than?]{.fragment}    |\n| `>`      | [is greater than?]{.fragment} |\n\n: {tbl-colwidths=\"\\[25,75\\]\"}\n\n## Recap: Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"70%\"}\n::: wooclap\nMatch the following logical operators to their definitions.\n\n::: wooclap-choices\n-   `<=`\n-   `>=`\n-   `==`\n-   `!=`\n:::\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n## Recap: Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"70%\"}\n::: wooclap\nMatch the following definitions to their logical operators.\n\n::: wooclap-choices\n-   is x AND y?\n-   is x OR y?\n-   is x NA?\n-   is x not NA?\n:::\n:::\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n## Recap: logical operators (cont.) {.smaller}\n\nOther useful logical operators:\n\n| operator      | definition                                                            |\n|:-----------------|:-----------------------------------------------------|\n| `x %in% y`    | [is x in y?]{.fragment}                                               |\n| `!(x %in% y)` | [is x not in y?]{.fragment}                                           |\n| `!x`          | [is not x? (only makes sense if `x` is `TRUE` or `FALSE`)]{.fragment} |\n\n: {tbl-colwidths=\"\\[25,75\\]\"}\n\n## Recap: logical operators (cont.) {.smaller}\n\n<br>\n\n\n::: columns\n\n::: {.column width = \"30%\"}\n| Col1 | Col2 | Col3 |\n|------|------|------|\n| 1    | A    |50    |\n| 2    | B    |40    |    \n| 3    | A    |30    |\n| 4    | B    |NA    |\n| 5    | C    |10    |\n\n:::\n\n::: {.column width = \"10%\"}\n\n:::\n\n::: {.column width = \"60%\"}\n\n:::question\nFor which rows are the following true?\n:::\n\n::: incremental\n\n- `Col1 < 3 | Col3 < 20 `\n\n- `Col2 == \"C\"`\n\n- `Col2 %in% c(\"C\", \"A\")`\n\n- `is.na(Col3)`\n\n- `!is.na(Col3)`\n\n\n\n:::\n:::\n\n:::\n\n# Data tidying\n\n## Tidy data\n\n> \"Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table.\"\n>\n> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>\n\n. . .\n\n**Note:** \"easy to manipulate\" = \"straightforward to manipulate\"\n\n## Goal\n\nVisualize StatSci majors over the years!\n\n![](images/07/statsci-majors-2025.png)\n\n**TO DO:** Update with plot from end of AE\n\n## Data {.smaller}\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 16\n  degree_type `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018`\n  <chr>        <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2              0      1      0      0      4      4      1      0\n2 AB               2      2      4      1      3      6      3      4\n3 BS2              2      6      1      0      5      6      6      8\n4 BS               5      9      4     13     10     17     24     21\n# â„¹ 7 more variables: `2019` <dbl>, `2020` <dbl>, `2021` <dbl>,\n#   `2022` <dbl>, `2023` <dbl>, `2024` <dbl>, `2025` <dbl>\n```\n\n\n:::\n:::\n\n\n. . .\n\n::: incremental\n-   The first column (variable) is the `degree`:\n\n    ::: small\n    -   BS (Bachelor of Science)\n    -   BS2 (Bachelor of Science, 2nd major)\n    -   AB (Bachelor of Arts)\n    -   AB2 (Bachelor of Arts, 2nd major)\n    :::\n\n-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2025.\n:::\n\n## Let's plan! {.smaller}\n\nReview the goal plot and sketch the data frame needed to create it. What would go inside `aes` when we call `ggplot`?\n\n![](images/07/statsci-majors-2025.png){width=\"500\"}\n\n## The Goal {.smaller .nostretch}\n\nWe want to write code that starts something like this:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(statsci, aes(x = year, y = n, color = degree_type)) + \n  ...\n```\n:::\n\n\n. . .\n\n<br>\n\nBut our data are not in the right format :(\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 16\n  degree_type `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018`\n  <chr>        <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2              0      1      0      0      4      4      1      0\n2 AB               2      2      4      1      3      6      3      4\n3 BS2              2      6      1      0      5      6      6      8\n4 BS               5      9      4     13     10     17     24     21\n# â„¹ 7 more variables: `2019` <dbl>, `2020` <dbl>, `2021` <dbl>,\n#   `2022` <dbl>, `2023` <dbl>, `2024` <dbl>, `2025` <dbl>\n```\n\n\n:::\n:::\n\n\n## The Challenge {.smaller .nostretch}\n\n::: columns\n::: {.column width=\"70%\"}\n***How do we go from this ....***\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 16\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  degree_type 2011 2012 2013 2014 2015 2016 2017 2018 2019\n1         AB2    0    1    0    0    4    4    1    0    0\n2          AB    2    2    4    1    3    6    3    4    4\n3         BS2    2    6    1    0    5    6    6    8    8\n4          BS    5    9    4   13   10   17   24   21   26\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column .fragment width=\"30%\"}\n***.... to this??***\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 x 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   degree_type year n\n1          AB2 2011 0\n2          AB2 2012 1\n3          AB2 2013 0\n4          AB2 2014 0\n5          AB2 2015 4\n6          AB2 2016 4\n7          AB2 2017 1\n8          AB2 2018 0\n9          AB2 2019 0\n10         AB2 2020 1\n11         AB2 2021 2\n12         AB2 2022 0\n13         AB2 2023 3\n14         AB2 2024 1\n15         AB2 2025 0\n16          AB 2011 2\n17          AB 2012 2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n# Pivot\n\n## `pivot_longer()` {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"65%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 16\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  degree_type 2011 2012 2013 2014 2015 2016 2017 2018 2019\n1         AB2    0    1    0    0    4    4    1    0    0\n2          AB    2    2    4    1    3    6    3    4    4\n3         BS2    2    6    1    0    5    6    6    8    8\n4          BS    5    9    4   13   10   17   24   21   26\n```\n\n\n:::\n:::\n\n\n::: {.task .fragment}\nPivot the `statsci` data frame *longer* such that each row represents a degree type / year combination.\n\n`year` and `n`umber of graduates for that year are columns in the result data frame.\n:::\n:::\n\n::: {.column width=\"5%\"}\nâŸ¶\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 x 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   degree_type year n\n1          AB2 2011 0\n2          AB2 2012 1\n3          AB2 2013 0\n4          AB2 2014 0\n5          AB2 2015 4\n6          AB2 2016 4\n7          AB2 2017 1\n8          AB2 2018 0\n9          AB2 2019 0\n10         AB2 2020 1\n11         AB2 2021 2\n12         AB2 2022 0\n13         AB2 2023 3\n14         AB2 2024 1\n15         AB2 2025 0\n16          AB 2011 2\n17          AB 2012 2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `pivot_longer()` {.smaller .scrollable}\n\n::: columns\n::: {.column width=\"65%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 16\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  degree_type 2011 2012 2013 2014 2015 2016 2017 2018 2019\n1         AB2    0    1    0    0    4    4    1    0    0\n2          AB    2    2    4    1    3    6    3    4    4\n3         BS2    2    6    1    0    5    6    6    8    8\n4          BS    5    9    4   13   10   17   24   21   26\n```\n\n\n:::\n:::\n\n\n::: {.task .fragment}\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    \n    cols = ___________________ ,\n    \n    names_to = _______________ ,\n    \n    values_to = ______________\n  )\n```\n:::\n\n:::\n:::\n\n::: {.column width=\"5%\"}\nâŸ¶\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 x 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   degree_type year n\n1          AB2 2011 0\n2          AB2 2012 1\n3          AB2 2013 0\n4          AB2 2014 0\n5          AB2 2015 4\n6          AB2 2016 4\n7          AB2 2017 1\n8          AB2 2018 0\n9          AB2 2019 0\n10         AB2 2020 1\n11         AB2 2021 2\n12         AB2 2022 0\n13         AB2 2023 3\n14         AB2 2024 1\n15         AB2 2025 0\n16          AB 2011 2\n17          AB 2012 2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `year` {.smaller}\n\n::: columns\n::: {.column width=\"50%\"}\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |> \n  pivot_longer(\n    cols = -degree_type,\n    values_to = \"n\",\n    names_to = \"year\"\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 Ã— 3\n   degree_type year      n\n   <chr>       <chr> <dbl>\n 1 AB2         2011      0\n 2 AB2         2012      1\n 3 AB2         2013      0\n 4 AB2         2014      0\n 5 AB2         2015      4\n 6 AB2         2016      4\n 7 AB2         2017      1\n 8 AB2         2018      0\n 9 AB2         2019      0\n10 AB2         2020      1\n# â„¹ 50 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::: {.column width=\"50%\"}\n::: question\nWhat is the type of the `year` variable? Why? What should it be?\n:::\n\n::: fragment\n::: incremental\n-   It's a character (`chr`) variable since the information came from the columns of the original data frame.\n\n-   R cannot know that these character strings represent years.\n\n-   The variable type should be numeric.\n:::\n:::\n:::\n:::\n\n## `pivot_longer()` again {.smaller .scrollable}\n\n::: question\nThis time, also make sure `year` is a numerical variable in the resulting data frame.\n:::\n\n::: columns\n::: {.column width = \"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci |>\n  pivot_longer(\n    cols = -degree_type,\n    values_to = \"n\",\n    names_to = \"year\"\n  )\n```\n:::\n\n:::\n\n::: {.column width = \"50%\" }\n\n:::\n\n:::\n\n## `pivot_longer()` again {.smaller .scrollable}\n\n::: question\nThis time, also make sure `year` is a numerical variable in the resulting data frame.\n:::\n\n::: columns\n::: {.column width = \"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|6\"}\nstatsci |>\n  pivot_longer(\n    cols = -degree_type,\n    values_to = \"n\",\n    names_to = \"year\",\n    names_transform = as.numeric\n  )\n```\n:::\n\n:::\n\n::: {.column width = \"50%\" .fragment}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 Ã— 3\n   degree_type  year     n\n   <chr>       <dbl> <dbl>\n 1 AB2          2011     0\n 2 AB2          2012     1\n 3 AB2          2013     0\n 4 AB2          2014     0\n 5 AB2          2015     4\n 6 AB2          2016     4\n 7 AB2          2017     1\n 8 AB2          2018     0\n 9 AB2          2019     0\n10 AB2          2020     1\n# â„¹ 50 more rows\n```\n\n\n:::\n:::\n\n\n:::\n\n:::\n\n# Application exercise\n\n## Goal: recreate this plot {.smaller}\n\n![](images/07/statsci-majors-2025.png)\n\n## ae\\-05\\-majors\\-tidy {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-05\\-majors\\-tidy\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n\n# Pivot Wider\n\n## We pivotted longer... what about wider? {.smaller}\n\n::: columns\n::: {.column width=\"65%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 16\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  degree_type 2011 2012 2013 2014 2015 2016 2017 2018 2019\n1         AB2    0    1    0    0    4    4    1    0    0\n2          AB    2    2    4    1    3    6    3    4    4\n3         BS2    2    6    1    0    5    6    6    8    8\n4          BS    5    9    4   13   10   17   24   21   26\n```\n\n\n:::\n:::\n\n\n::: {.task .fragment}\nCan we go the other direction?\n:::\n:::\n\n::: {.column width=\"5%\"}\nâŸµ\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 x 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   degree_type year n\n1          AB2 2011 0\n2          AB2 2012 1\n3          AB2 2013 0\n4          AB2 2014 0\n5          AB2 2015 4\n6          AB2 2016 4\n7          AB2 2017 1\n8          AB2 2018 0\n9          AB2 2019 0\n10         AB2 2020 1\n11         AB2 2021 2\n12         AB2 2022 0\n13         AB2 2023 3\n14         AB2 2024 1\n15         AB2 2025 0\n16          AB 2011 2\n17          AB 2012 2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## We pivotted longer... what about wider? {.smaller}\n\n::: columns\n::: {.column width=\"65%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 x 16\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  degree_type 2011 2012 2013 2014 2015 2016 2017 2018 2019\n1         AB2    0    1    0    0    4    4    1    0    0\n2          AB    2    2    4    1    3    6    3    4    4\n3         BS2    2    6    1    0    5    6    6    8    8\n4          BS    5    9    4   13   10   17   24   21   26\n```\n\n\n:::\n:::\n\n\n::: task\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer |> \n  pivot_wider(\n    names_from = ____________ ,\n    \n    values_from = ___________ , \n  )\n```\n:::\n\n:::\n:::\n\n::: {.column width=\"5%\"}\nâŸµ\n:::\n\n::: {.column width=\"30%\"}\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 60 x 3\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n   degree_type year n\n1          AB2 2011 0\n2          AB2 2012 1\n3          AB2 2013 0\n4          AB2 2014 0\n5          AB2 2015 4\n6          AB2 2016 4\n7          AB2 2017 1\n8          AB2 2018 0\n9          AB2 2019 0\n10         AB2 2020 1\n11         AB2 2021 2\n12         AB2 2022 0\n13         AB2 2023 3\n14         AB2 2024 1\n15         AB2 2025 0\n16          AB 2011 2\n17          AB 2012 2\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## Recap: Pivot {.smaller}\n\n::: incremental\n-   ***When should you pivot?*** If all of the data you need is in your data frame, but the columns you need don't exist, there is a good chance it's time to pivot!\n-   ***Wide and long:*** Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format\n-   ***Pivot longer - data type:*** When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.\n:::\n\n## Recap: Plotting {.smaller}\n\n::: incremental\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive.\n\n-   However, you should always be critical of defaultsand see if you can improve the plot to better portray your data / results / what you want to communicate.\n:::\n",
    "supporting": [
      "07-tidying-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}