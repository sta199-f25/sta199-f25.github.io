{
  "hash": "31c8b4d8624f4daaf7bc206b51c8e1f4",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exploratory data analysis II\"\nsubtitle: \"Lecture 6\"\ndate: \"2025-09-11\"\nformat: \n  revealjs: \n    output-file: 06-exploratory-data-analysis-II-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    toc: false\n  html: \n    code-link: true\n---\n\n\n\n# Warm-up\n\n## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: {.columns}\n\n::: {.column width=\"85%\"}\n\n::: wooclap\nWhich of the following is **false** about the following plot and the code that produced it?\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06-exploratory-data-analysis-II_files/figure-revealjs/unnamed-chunk-1-1.png){width=100%}\n:::\n:::\n\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n\n:::\n\n::: \n\n::: wooclap\n::: wooclap-choices\n- There are no Chinstrap or Gentoo penguins on Torgersen Island.\n- `legend.position = \"bottom\"` is set in the `theme()` layer.\n- The same variable is mapped to both `color` and `fill`.\n- `group_by(species)` is used to create the boxplots. [*]\n- A Biscoe island penguin with a flipper length of 190 mm must be an AdÃ©lie.\n:::\n:::\n\n## Reminder: Code style and readability {.smaller}\n\n::: {.incremental .xsmall}\n-   Plots should include an informative title, axes and legends should have human-readable labels, and careful consideration should be given to aesthetic choices.\n\n-   Code should follow the [tidyverse style](https://style.tidyverse.org/) ([style.tidyverse.org](https://style.tidyverse.org/)) Particularly,\n\n    -   space before and line breaks after each `+` when building a `ggplot`\n    -   space before and line breaks after each `|>` in a data transformation pipeline\n    -   code should be properly indented\n    -   spaces around `=` signs and spaces after commas\n\n-   All code should be visible in the PDF output, i.e., should not run off the page on the PDF.\n    Long lines that run off the page should be split across multiple lines with line breaks.\n    **Tip:** Haikus not novellas when writing code!\n\n-   Whydowecareaboutthestyleandreadabilityofyourcode? [$\\rightarrow$ Why do we care about the style and readability of your code?]{.fragment}\n\n-   Je voudrais un cafe [$\\rightarrow$ Je voudrais un cafÃ©]{.fragment}\n:::\n\n# `gerrymander` \n\n## Packages {.smaller}\n\n-   For the data: [**usdata**](https://openintrostat.github.io/usdata/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(usdata)\n```\n:::\n\n\n-   For the analysis: [**tidyverse**](https://www.tidyverse.org/packages/) and [**ggthemes**](https://jrnold.github.io/ggthemes/)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(ggthemes)\n```\n:::\n\n\n## From the AE {.smaller}\n\n::: question\nIs a Congressional District more likely to have high prevalence of gerrymandering if a Democrat was able to flip the seat in the 2018 election?\n:::\n\n::: {.columns}\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  gerrymander, \n  aes(x = flip18, fill = gerry)\n  ) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](06-exploratory-data-analysis-II_files/figure-revealjs/unnamed-chunk-4-1.png){width=960}\n:::\n:::\n\n\n:::\n::: {.column}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  count(flip18, gerry) |>\n  group_by(flip18) |>\n  mutate(prop = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 4\n# Groups:   flip18 [3]\n  flip18 gerry     n  prop\n   <dbl> <fct> <int> <dbl>\n1     -1 low       2 0.4  \n2     -1 mid       3 0.6  \n3      0 low      52 0.133\n4      0 mid     242 0.617\n5      0 high     98 0.25 \n6      1 low       8 0.211\n7      1 mid      25 0.658\n8      1 high      5 0.132\n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n# `group_by()`, `summarize()`, `count()`\n\n## What does `group_by()` do? {.scrollable}\n\n::: question\nWhat does `group_by()` do in the following pipeline?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  count(flip18, gerry) |>\n  group_by(flip18) |>\n  mutate(prop = n / sum(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 8 Ã— 4\n# Groups:   flip18 [3]\n  flip18 gerry     n  prop\n   <dbl> <fct> <int> <dbl>\n1     -1 low       2 0.4  \n2     -1 mid       3 0.6  \n3      0 low      52 0.133\n4      0 mid     242 0.617\n5      0 high     98 0.25 \n6      1 low       8 0.211\n7      1 mid      25 0.658\n8      1 high      5 0.132\n```\n\n\n:::\n:::\n\n\n## Let's simplify! {.scrollable}\n\n::: question\nWhat does `group_by()` do in the following pipeline?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(mean_trump16 = mean(trump16))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 2\n   state mean_trump16\n   <chr>        <dbl>\n 1 AK            52.8\n 2 AL            62.6\n 3 AR            60.9\n 4 AZ            46.9\n 5 CA            31.7\n 6 CO            43.6\n 7 CT            41.0\n 8 DE            41.9\n 9 FL            47.9\n10 GA            51.3\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n\n## `group_by()` {.smaller}\n\n-   Group by converts a data frame to a grouped data frame, where subsequent operations are performed once per group\n\n-   `ungroup()` removes grouping\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  ungroup()\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 435 Ã— 12\n   district last_name first_name party16 clinton16 trump16 dem16 state\n   <chr>    <chr>     <chr>      <chr>       <dbl>   <dbl> <dbl> <chr>\n 1 AK-AL    Young     Don        R            37.6    52.8     0 AK   \n 2 AL-01    Byrne     Bradley    R            34.1    63.5     0 AL   \n 3 AL-02    Roby      Martha     R            33      64.9     0 AL   \n 4 AL-03    Rogers    Mike D.    R            32.3    65.3     0 AL   \n 5 AL-04    Aderholt  Rob        R            17.4    80.4     0 AL   \n 6 AL-05    Brooks    Mo         R            31.3    64.7     0 AL   \n 7 AL-06    Palmer    Gary       R            26.1    70.8     0 AL   \n 8 AL-07    Sewell    Terri      D            69.8    28.6     1 AL   \n 9 AR-01    Crawford  Rick       R            30.2    65       0 AR   \n10 AR-02    Hill      French     R            41.7    52.4     0 AR   \n# â„¹ 425 more rows\n# â„¹ 4 more variables: party18 <chr>, dem18 <dbl>, flip18 <dbl>,\n#   gerry <fct>\n```\n\n\n:::\n:::\n\n\n## `group_by() |> summarize()` {.smaller}\n\nA common pipeline is `group_by()` and then `summarize()` to **calculate** summary statistics for each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(\n    mean_trump16 = mean(trump16),\n    median_trump16 = median(trump16)\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 3\n   state mean_trump16 median_trump16\n   <chr>        <dbl>          <dbl>\n 1 AK            52.8           52.8\n 2 AL            62.6           64.9\n 3 AR            60.9           63.0\n 4 AZ            46.9           47.7\n 5 CA            31.7           28.4\n 6 CO            43.6           41.3\n 7 CT            41.0           40.4\n 8 DE            41.9           41.9\n 9 FL            47.9           49.6\n10 GA            51.3           56.6\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n\n## `group_by() |> summarize()` {.smaller}\n\nThis pipeline can also be used to **count** number of observations for each group:\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n\n## `summarize()` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... |>\n  summarize(\n    name_of_summary_statistic = summary_function(variable)\n  )\n```\n:::\n\n\n. . .\n\n-   `name_of_summary_statistic`: Anything you want to call it!\n    -   Recommendation: Keep it short and evocative\n-   `summary_function()`:\n    -   `n()`: number of observations\n    -   `mean()`: mean\n    -   `median()`: median\n    -   ...\n\n## Spot the difference {.smaller}\n\n::: question\nWhat's the difference between the following two pipelines?\n:::\n\n::: columns\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n())\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n:::\n\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  count(state)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 2\n   state     n\n   <chr> <int>\n 1 AK        1\n 2 AL        7\n 3 AR        4\n 4 AZ        9\n 5 CA       53\n 6 CO        7\n 7 CT        5\n 8 DE        1\n 9 FL       27\n10 GA       14\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n:::\n:::\n\n## `count()`\n\n::: columns\n::: {.column width=\"40%\"}\n``` r\n... |>\n  count(variable)\n```\n:::\n\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n... |>\n  count(variable1, variable2)\n```\n:::\n\n\n:::\n:::\n\n-   Count the number of observations in each level of variable(s)\n\n-   Place the counts in a variable called `n`\n\n## `count()` and `sort` {.scrollable}\n\n::: question\nWhat does the following pipeline do?\nRewrite it with `count()` instead.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  group_by(state) |>\n  summarize(n = n()) |>\n  arrange(desc(n))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 2\n   state     n\n   <chr> <int>\n 1 CA       53\n 2 TX       36\n 3 FL       27\n 4 NY       27\n 5 IL       18\n 6 PA       18\n 7 OH       16\n 8 GA       14\n 9 MI       14\n10 NC       13\n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n\n# `mutate()`\n\n## Flip the question\n\n::: question\nIs a Congressional District more likely to have high prevalence of gerrymandering if a Democrat was able to flip the seat in the 2018 election?\n:::\n\nvs.\n\n::: question\nIs a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\n:::\n\n## Flipping vs. gerrymandering prevalence {.smaller}\n\n::: {.question .xsmall}\nThe following code should produce a visualization that answers the question \"Is a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\" However, it produces a `warning` and an unexpected plot.\nWhat's going on?\n:::\n\n::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  gerrymander, \n  aes(x = gerry, fill = flip18)\n  ) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nWarning: The following aesthetics were dropped during statistical\ntransformation: fill.\nâ„¹ This can happen when ggplot fails to infer the correct grouping\n  structure in the data.\nâ„¹ Did you forget to specify a `group` aesthetic or to convert a\n  numerical variable into a factor?\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](06-exploratory-data-analysis-II_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n:::\n:::\n\n## Another glimpse at `gerrymander` {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(gerrymander)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nRows: 435\nColumns: 12\n$ district   <chr> \"AK-AL\", \"AL-01\", \"AL-02\", \"AL-03\", \"AL-04\", \"AL-â€¦\n$ last_name  <chr> \"Young\", \"Byrne\", \"Roby\", \"Rogers\", \"Aderholt\", \"â€¦\n$ first_name <chr> \"Don\", \"Bradley\", \"Martha\", \"Mike D.\", \"Rob\", \"Moâ€¦\n$ party16    <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"D\", \"R\", \"R\",â€¦\n$ clinton16  <dbl> 37.6, 34.1, 33.0, 32.3, 17.4, 31.3, 26.1, 69.8, 3â€¦\n$ trump16    <dbl> 52.8, 63.5, 64.9, 65.3, 80.4, 64.7, 70.8, 28.6, 6â€¦\n$ dem16      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 1, 0, 0â€¦\n$ state      <chr> \"AK\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"AL\", \"â€¦\n$ party18    <chr> \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"R\", \"D\", \"R\", \"R\",â€¦\n$ dem18      <dbl> 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 1, 1, 0, 0â€¦\n$ flip18     <dbl> 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0â€¦\n$ gerry      <fct> mid, high, high, high, high, high, high, high, miâ€¦\n```\n\n\n:::\n:::\n\n\n## `mutate()`\n\n-   We want to use `flip18` as a categorical variable\n\n-   But it's stored as a numeric\n\n-   So we need to change its type first, before we can use it as a categorical variable\n\n-   The `mutate()` function transforms (*mutates*) a data frame by creating a new column or updating an existing one\n\n## `mutate()` in action {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ngerrymander |>\n  mutate(flip18 = as.factor(flip18))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 435 Ã— 12\n   district last_name first_name party16 clinton16 trump16 dem16 state\n   <chr>    <chr>     <chr>      <chr>       <dbl>   <dbl> <dbl> <chr>\n 1 AK-AL    Young     Don        R            37.6    52.8     0 AK   \n 2 AL-01    Byrne     Bradley    R            34.1    63.5     0 AL   \n 3 AL-02    Roby      Martha     R            33      64.9     0 AL   \n 4 AL-03    Rogers    Mike D.    R            32.3    65.3     0 AL   \n 5 AL-04    Aderholt  Rob        R            17.4    80.4     0 AL   \n 6 AL-05    Brooks    Mo         R            31.3    64.7     0 AL   \n 7 AL-06    Palmer    Gary       R            26.1    70.8     0 AL   \n 8 AL-07    Sewell    Terri      D            69.8    28.6     1 AL   \n 9 AR-01    Crawford  Rick       R            30.2    65       0 AR   \n10 AR-02    Hill      French     R            41.7    52.4     0 AR   \n# â„¹ 425 more rows\n# â„¹ 4 more variables: party18 <chr>, dem18 <dbl>, flip18 <fct>,\n#   gerry <fct>\n```\n\n\n:::\n:::\n\n\n## Revisit the plot {.smaller}\n\n::: question\nIs a Congressional District more likely to be flipped to a Democratic seat if it has high prevalence of gerrymandering or low prevalence of gerrymandering?\n:::\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\ngerrymander |>\n  mutate(flip18 = as.factor(flip18)) |>\n  ggplot(aes(x = gerry, fill = flip18)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](06-exploratory-data-analysis-II_files/figure-revealjs/unnamed-chunk-19-1.png){width=960}\n:::\n:::\n\n\n# Application exercise\n\n## ae\\-04\\-gerrymander\\-explore\\-II {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-04\\-gerrymander\\-explore\\-II\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n\n## Recap: aesthetic mappings\n\n-   **Local** aesthetic mappings for a given `geom`\n\n-   **Global** aesthetic mappings for all `geom`s\n",
    "supporting": [
      "06-exploratory-data-analysis-II_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}