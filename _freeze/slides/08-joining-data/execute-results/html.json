{
  "hash": "b33521c028ebbcbe725c7a698e9c09f7",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Joining data\"\nsubtitle: \"Lecture 8\"\ndate: \"2025-09-18\"\nformat: \n  revealjs: \n    output-file: 08-joining-data-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    pdf-separate-fragments: true\n    toc: false\n  html: \n    code-link: true\nfilters: \n  - remove-fmt-skip.lua\n---\n\n\n\n# Warm-up\n\n## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}\n\n\n\n::: columns\n::: {.column width=\"85%\"}\n\n::: wooclap\n\n::: columns\n\n::: {.column width=\"35%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 Ã— 3\n   degree_type  year     n\n   <chr>       <dbl> <dbl>\n 1 AB2          2011     0\n 2 AB2          2012     1\n 3 AB2          2013     0\n 4 AB2          2014     0\n 5 AB2          2015     4\n 6 AB2          2016     4\n 7 AB2          2017     1\n 8 AB2          2018     0\n 9 AB2          2019     0\n10 AB2          2020     1\n11 AB2          2021     2\n12 AB2          2022     0\n13 AB2          2023     3\n14 AB2          2024     1\n15 AB2          2025     0\n16 AB           2011     2\n17 AB           2012     2\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"5%\"}\nâŸ¶\n:::\n\n::: {.column width=\"60%\"}\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 16\n  degree_type `2011` `2012` `2013` `2014` `2015`\n  <chr>        <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2              0      1      0      0      4\n2 AB               2      2      4      1      3\n3 BS2              2      6      1      0      5\n4 BS               5      9      4     13     10\n# â„¹ 10 more variables: `2016` <dbl>,\n#   `2017` <dbl>, `2018` <dbl>, `2019` <dbl>,\n#   `2020` <dbl>, `2021` <dbl>, `2022` <dbl>,\n#   `2023` <dbl>, `2024` <dbl>, `2025` <dbl>\n```\n\n\n:::\n:::\n\n\nFill in the blanks to pivot `statsci_longer` wider.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer |>\n  pivot_wider(\n    names_from = __BLANK_1__,\n    values_from = __BLANK_2__,\n  )\n```\n:::\n\n\n:::\n\n:::\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n\n:::\n\n## Pivot wider {.xsmall}\n\n::: columns\n\n::: {.column width=\"27%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 17 Ã— 3\n   degree_type  year     n\n   <chr>       <dbl> <dbl>\n 1 AB2          2011     0\n 2 AB2          2012     1\n 3 AB2          2013     0\n 4 AB2          2014     0\n 5 AB2          2015     4\n 6 AB2          2016     4\n 7 AB2          2017     1\n 8 AB2          2018     0\n 9 AB2          2019     0\n10 AB2          2020     1\n11 AB2          2021     2\n12 AB2          2022     0\n13 AB2          2023     3\n14 AB2          2024     1\n15 AB2          2025     0\n16 AB           2011     2\n17 AB           2012     2\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"3%\"}\nâŸ¶\n:::\n\n::: {.column width=\"70%\"}\n\n\n::: {.cell}\n\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstatsci_longer |>\n  pivot_wider(\n    names_from = year,\n    values_from = n,\n  )\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 16\n  degree_type `2011` `2012` `2013` `2014` `2015` `2016` `2017` `2018`\n  <chr>        <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>  <dbl>\n1 AB2              0      1      0      0      4      4      1      0\n2 AB               2      2     NA     NA     NA     NA     NA     NA\n# â„¹ 7 more variables: `2019` <dbl>, `2020` <dbl>, `2021` <dbl>,\n#   `2022` <dbl>, `2023` <dbl>, `2024` <dbl>, `2025` <dbl>\n```\n\n\n:::\n:::\n\n\n:::\n\n:::\n\n## Announcements\n\n-   1\n-   2\n-   ...\n\n## Recap: Pivot {.smaller}\n\n::: incremental\n-   ***When should you pivot?*** If all of the data you need is in your data frame, but the columns you need don't exist, there is a good chance it's time to pivot!\n-   ***Wide and long:*** Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format\n-   ***Pivot longer - data type:*** When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `\npivot_longer()\n` function.\n:::\n\n## Recap: Plotting {.smaller}\n\n::: incremental\n-   You can tweak a plot forever, but at some point the tweaks are likely not very productive.\n\n-   However, you should always be critical of defaultsand see if you can improve the plot to better portray your data / results / what you want to communicate.\n:::\n\n# Recoding data\n\n## What's going on in this plot? {.smaller}\n\n::: question\nCan you guess the variable plotted here?\n:::\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](08-joining-data_files/figure-revealjs/unnamed-chunk-8-1.png){width=960}\n:::\n:::\n\n\n## Sales taxes in US states {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 51 Ã— 7\n   state    state_tax_rate state_tax_rank avg_local_tax_rate max_local\n   <chr>             <dbl>          <dbl>              <dbl>     <dbl>\n 1 Alabama            4                40               5.44     11   \n 2 Alaska             0                46               1.82      7.85\n 3 Arizona            5.6              28               2.92      5.3 \n 4 Arkansas           6.5               9               2.98      6.12\n 5 Califorâ€¦           7.25              1               1.73      5.25\n 6 Colorado           2.9              45               4.96      8.3 \n 7 Connectâ€¦           6.35             12               0         0   \n 8 Delaware           0                46               0         0   \n 9 Florida            6                17               1.02      2   \n10 Georgia            4                40               3.44      5   \n# â„¹ 41 more rows\n# â„¹ 2 more variables: combined_tax_rate <dbl>, combined_rank <dbl>\n```\n\n\n:::\n:::\n\n\n## Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"85%\"}\n\n::: wooclap\nPut the following steps in order to compare the average state sales tax rates of swing states (Arizona, Georgia, Michigan, Nevada, North Carolina, Pennsylvania, and Wisconsin) vs. non-swing states:\n\n::: wooclap-choices\n-   Group by `swing_state`\n-   Summarize to find the mean sales tax in each type of state\n-   Create a new variable called `swing_state` with levels `\"Swing\"` and `\"Non-swing\"`\n:::\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n## Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"85%\"}\n\n::: wooclap\nFirst, create a vector called `list_of_swing_states` that contains the names of the swing states.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\nlist_of_swing_states <- c(\n  \"Arizona\", \"Georgia\", \"Michigan\", \"Nevada\", \"North Carolina\",\n  \"Pennsylvania\", \"Wisconsin\"\n)\n```\n:::\n\n\nThen, fill in the blanks to create a new variable called `swing_state` with levels `\"Swing\"` and `\"Non-swing\"`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes <- sales_taxes |>\n  __BLANK_1__(\n    swing_state = __BLANK_2__(\n      state __BLANK_3__ list_of_swing_states, \"Swing\", \"Non-swing\"\n    )\n  )\n```\n:::\n\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Recap: `if_else()`\n\n``` r\nif_else(\n  x == y,               #<1>\n  \"x is equal to y\",    #<2>\n  \"x is not equal to y\" #<3>\n)\n```\n\n1.  Condition\n2.  Value if condition is `TRUE`\n3.  Value if condition is `FALSE`\n\n## Participate ðŸ“±ðŸ’» {.smaller}\n\n::: columns\n::: {.column width=\"85%\"}\n\n::: wooclap\nFill in the blank to compare the average state sales tax rates of swing states vs. non-swing states.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes |>\n  __BLANK__ |>\n  summarize(mean_state_tax = mean(state_tax_rate))\n```\n:::\n\n\n::: wooclap-choices\n- `group_by(swing_state)`\n- `group_by(list_of_swing_states)`\n- `filter(swing_state == \"Swing\")`\n- `arrange(swing_state)`\n:::\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n## Sales tax in swing states {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes |>\n  group_by(swing_state) |>\n  summarize(mean_state_tax = mean(state_tax_rate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 2\n  swing_state mean_state_tax\n  <chr>                <dbl>\n1 Non-swing             5.05\n2 Swing                 5.46\n```\n\n\n:::\n:::\n\n\n## Sales tax in coastal states {.smaller}\n\n::: question\nSuppose you're tasked with the following:\n\n> Compare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.\n\nHow would you approach this task?\n:::\n\n. . .\n\n-   Create a new variable called `coast` with levels `\"Pacific\"`, `\"Atlantic\"`, and `\"Neither\"`\n-   Group by `coast`\n-   Summarize to find the mean sales tax in each type of state\n\n## Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"85%\"}\n\n::: wooclap\nFirst, create two vectors called `pacific_coast` and `atlantic_coast` that contain the respective states.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacific_coast <- c(\"Alaska\", \"Washington\", \"Oregon\", \"California\", \"Hawaii\")\n\n# fmt: skip\natlantic_coast <- c(\n  \"Connecticut\", \"Delaware\", \"Georgia\", \"Florida\", \"Maine\", \"Maryland\", \"Massachusetts\",\n  \"New Hampshire\", \"New Jersey\", \"New York\", \"North Carolina\", \"Rhode Island\", \n  \"South Carolina\", \"Virginia\"\n)\n```\n:::\n\n\nThen, fill in the blank to create a new variable called `coast`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes <- sales_taxes |>\n  mutate(\n    coast = __BLANK__(\n      state %in% atlantic_coast ~ \"Atlantic\",\n      state %in% pacific_coast  ~ \"Pacific\",\n      .default = \"Neither\"\n    )\n  )\n```\n:::\n\n\n:::\n\n:::\n\n::: {.column width=\"15%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n:::\n\n\n::: {.cell}\n\n:::\n\n\n## Recap: `case_when()`\n\n``` r\ncase_when(\n  x > y  ~ \"x is greater than y\", #<1>\n  x < y  ~ \"x is less than y\",    #<2>\n  .default = \"x is equal to y\"    #<3>  \n)\n```\n\n1.  Value if first condition is `TRUE`\n2.  Value if second condition is `TRUE`\n3.  Value if neither condition is `TRUE`, i.e., default value\n\n## Sales tax in coastal states {.smaller .scrollable}\n\n::: question\nCompare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsales_taxes |>\n  group_by(coast) |>\n  summarize(mean_state_tax = mean(state_tax_rate))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  coast    mean_state_tax\n  <chr>             <dbl>\n1 Atlantic           4.65\n2 Neither            5.50\n3 Pacific            2.17\n```\n\n\n:::\n:::\n\n\n## Sales tax in US regions {.smaller}\n\n::: question\nSuppose you're tasked with the following:\n\n> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).\n\nHow would you approach this task?\n:::\n\n. . .\n\n-   Create a new variable called `region` with levels `\"Midwest\"`, `\"Northeast\"`, `\"South\"`, and `\"West\"`.\n-   Group by `region`\n-   Summarize to find the mean sales tax in each type of state\n\n## `mutate()` with `case_when()` {.smaller .scrollable}\n\n::: question\nWho feels like filling in the blanks lists of states in each region?\nWho feels like it's simply too tedious to write out names of all states?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlist_of_midwest_states <- c(___)\nlist_of_northeast_states <- c(___)\nlist_of_south_states <- c(___)\nlist_of_west_states <- c(___)\n\nsales_taxes <- sales_taxes |>\n  mutate(\n    coast = case_when(\n      state %in% list_of_west_states ~ \"Midwest\",\n      state %in% list_of_northeast_states ~ \"Northeast\",\n      state %in% list_of_south_states ~ \"South\",\n      state %in% list_of_west_states ~ \"West\"\n    )\n  )\n```\n:::\n\n\n# Joining data\n\n## Why join? {.smaller}\n\nSuppose we want to answer questions like:\n\n> Is there a relationship between\\\n> - number of QS courses taken\\\n> - having scored a 4 or 5 on the AP stats exam\\\n> - motivation for taking course\\\n> - ...\\\n> and performance in this course?\n\n. . .\n\nEach of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.\n\n## Why join? {.smaller}\n\nSuppose we want to answer questions like:\n\n> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).\n\n. . .\n\nThis can also be solved with *join*ing region information with the state-level sales tax data.\n\n## Setup\n\nFor the next few slides...\n\n::: columns\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- tibble(\n  id = c(1, 2, 3),\n  value_x = c(\"x1\", \"x2\", \"x3\")\n)\n\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n3     3 x3     \n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- tibble(\n  id = c(1, 2, 4),\n  value_y = c(\"y1\", \"y2\", \"y4\")\n)\n\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n     id value_y\n  <dbl> <chr>  \n1     1 y1     \n2     2 y2     \n3     4 y4     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `left_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n![](images/08/left-join.gif)\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nleft_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `right_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n![](images/08/right-join.gif)\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nright_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `full_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/08/full-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nfull_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n3     3 x3      <NA>   \n4     4 <NA>    y4     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `inner_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n![](images/08/inner-join.gif)\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninner_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n     id value_x value_y\n  <dbl> <chr>   <chr>  \n1     1 x1      y1     \n2     2 x2      y2     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `semi_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n![](images/08/semi-join.gif)\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsemi_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 2\n     id value_x\n  <dbl> <chr>  \n1     1 x1     \n2     2 x2     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n## `anti_join()`\n\n::: columns\n::: {.column width=\"50%\"}\n\n![](images/08/anti-join.gif)\n\n:::\n\n::: {.column width=\"50%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nanti_join(x, y)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nJoining with `by = join_by(id)`\n```\n\n\n:::\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 2\n     id value_x\n  <dbl> <chr>  \n1     3 x3     \n```\n\n\n:::\n:::\n\n\n:::\n:::\n\n# Application exercise\n\n## Goal\n\nCompare the average state sales tax rates of states in various regions (Midwest, Northeast, South, West), where the input data are:\n\n1.  States and sales taxes\n2.  States and regions\n\n## ae\\-06\\-taxes\\-join {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-06\\-taxes\\-join\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n",
    "supporting": [
      "08-joining-data_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}