{
  "hash": "f5ac10e24d373b4f8e31e2a55fc0031c",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Meet the toolkit\"\nsubtitle: \"Lecture 2\"\ndate: \"2025-08-28\"\nformat: \n  revealjs: \n    output-file: 01-hello-world-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: \"images/logo.png\" \n    toc: false\n  html: \n    code-link: true\n---\n\n\n\n# From last time: Correction\n\n## Setup\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4          âœ” readr     2.1.5     \nâœ” forcats   1.0.0          âœ” stringr   1.5.1     \nâœ” ggplot2   3.5.2          âœ” tibble    3.3.0.9000\nâœ” lubridate 1.9.4          âœ” tidyr     1.3.1     \nâœ” purrr     1.0.4          \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey <- read_csv(\"data/survey-anonymized.csv\")\n```\n:::\n\n\n\n\n## Revisit: Cleaning up programming languages with AI {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-fold=\"true\"}\nlibrary(ellmer)\n\nchat <- chat_openai()\n\nprompts <- survey |>\n  filter(!is.na(programming_languages)) |>\n  pull(programming_languages) |>\n  list()\n\ntype_language <- type_object(\n  language = type_string(),\n  experience = type_string()\n)\n\nlanguage_experience <- parallel_chat_structured(chat, prompts, type = type_language)\nlanguage_experience\n```\n:::\n\n\n```\nlanguage\n1 Python, Java, R, C/C++, JavaScript, HTML/CSS, SQL, C#, VBA, MATLAB, Rust, Assembly, Swift, Stata, Bash, Typescript, Web3 Suite (HTML, CSS, JS), Nextflow, SAS, PsycoPy, Mathematica, React, Vue, Yaml, CourseKata, Flutter, Scratch\n\nexperience\n1 Most students report a range of programming experience, from never having programmed before to being very comfortable in languages such as Python, Java, and R. Many took introductory courses (e.g., CS101, AP CS A) and are comfortable with basic programming constructs. Proficiency is generally highest in Python and Java, though some only have a little experience with languages like R, C/C++, and JavaScript. Quite a few have only used programming languages for specific classes or research projects and may not feel confident after a long break. Some students have experience with more niche or specialized tools such as MATLAB, SAS, and web technologies (HTML, CSS, JavaScript/JS frameworks). Many express a need for a refresher if not used recently. In summary, while a core group is comfortable with at least one language, especially Python or Java, many others have only basic to moderate experience and express the desire to gain more proficiency.\n```\n\n## Can it be trusted 100%? {.xsmall}\n\n**Nextflow** -- didn't show up before due to case mismatch (Netxflow vs. nextflow)\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  mutate(programming_languages = str_to_lower(programming_languages)) |>\n  filter(str_detect(programming_languages, \"nextflow\"))  |>\n  select(programming_languages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 1\n  programming_languages                                               \n  <chr>                                                               \n1 r (quite comfortable), bash (quite comfortable), python (less experâ€¦\n```\n\n\n:::\n:::\n\n\n**PsychoPy** -- misspelled by AI (PsycoPy vs. PsychoPy) + case mismatch\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  mutate(programming_languages = str_to_lower(programming_languages)) |>\n  filter(str_detect(programming_languages, \"psychopy\"))  |>\n  select(programming_languages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 1\n  programming_languages                                               \n  <chr>                                                               \n1 psychopy (haven't used in while), matlab (minimal for fmri processiâ€¦\n2 i have programmed with python before through psychopy. it was a verâ€¦\n```\n\n\n:::\n:::\n\n\n**CourseKata** -- not a programming language but a learning platform\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  mutate(programming_languages = str_to_lower(programming_languages)) |>\n  filter(str_detect(programming_languages, \"coursekata\"))  |>\n  select(programming_languages)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 1 Ã— 1\n  programming_languages                                               \n  <chr>                                                               \n1 i took statistics as my core math class last year. we coded with r;â€¦\n```\n\n\n:::\n:::\n\n\n# From last time: Course overview + policies\n\n## Tips for success\n\n- Prepare: Watch videos and read before class\n- Engage: Attend all lectures and labs actively\n- Ask questions: Use office hours and Ed Discussion forum\n- Start early: Donâ€™t procrastinate on assignments\n- Stay current: Content builds progressively\n\n## Support\n\n-   Help from humans:\n    -   Attend office hours\n    -   Ask and answer questions on the discussion forum\n-   Help from AI: Use the course chatbot (in Canvas!)\n-   Reserve email for questions on personal matters and/or grades\n-   Read the course support page\n\n## Announcements\n\n-   Posted on Canvas (Announcements tool) and sent via email, be sure to check both regularly\n-   I'll assume that you've read an announcement by the next \"business\" day\n-   I'll (try my best to) send a weekly update announcement each Friday, outlining the plan for the following week and reminding you what you need to do to prepare, practice, and perform\n\n## Diversity, inclusion, and belonging {.smaller}\n\nIt is my intent that students from all diverse backgrounds and perspectives be well-served by this course, that students' learning needs be addressed both in and out of class, and that the diversity that the students bring to this class be viewed as a resource, strength and benefit.\n\n::: incremental\n-   Fill out the Getting to know you survey.\n-   If you feel like your performance in the class is being impacted by your experiences outside of class, please don't hesitate to come and talk with me. I want to be a resource for you. If you prefer to speak with someone outside of the course, your advisors, and deans are excellent resources.\n-   I (like many people) am still in the process of learning about diverse perspectives and identities. If something was said in class (by anyone) that made you feel uncomfortable, please talk to me about it.\n:::\n\n## Access and accommodations\n\n-   The [Duke Access and Accommodation Services](https://access.duke.edu) is available to ensure that students are able to engage with their courses and related assignments.\n\n-   Accoomodations for exams must be arranged through Access and Accommodation Services and exams with accommodations must be taken in the testing center.\n\n-   I am committed to making all course materials accessible and I'm always learning how to do this better. If any course component is not accessible to you in any way, please don't hesitate to let me know.\n\n## Late work, waivers, lecture recordings, regrades...\n\n-   We have policies!\n-   Read about them on the [course syllabus](https://sta199-f25.github.io/course-syllabus.html) and refer back to them when you need it\n\n## Use of AI tools\n\n-   {{< fa check >}} **AI tools for code:** \n    - Sure, but be careful/critical! Working code `!=` correct/good code.\n    - Must explicitly cite, with **at a minimum** AI tool you're using (e.g., ChatGPT) and your prompt.\n\n-   {{< fa ban >}} **AI tools for narrative:** Absolutely not!\n\n-   {{< fa check >}} **AI tools for learning:** Sure, but be careful/critical!\n\n## Academic integrity\n\n> To uphold the Duke Community Standard:\n>\n> -   I will not lie, cheat, or steal in my academic endeavors;\n>\n> -   I will conduct myself honorably in all my endeavors; and\n>\n> -   I will act if the Standard is compromised.\n\n## A note on showing up and participating {.smaller}\n\n-  This is a large \"lecture\" but with lots of opportunities and expectations for active learning, participation, and collaboration.\n\n-  You are expected to show up and participate in all lectures and labs, though there are a good number of each you can miss without penalty.\n\n-  It's possible to read the books and watch the videos and get an exposure to the material we cover in the course without showing up, but the experience will be much less rich and you will likely miss out on a lot of learning. That's why the assessments and workflows are designed to reward and reinforce active participation.\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}