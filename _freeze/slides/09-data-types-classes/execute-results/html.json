{
  "hash": "f32f0b04710aa06d52b9a2363bb55b64",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Data types and classes\"\nsubtitle: \"Lecture 9\"\ndate: \"2025-09-23\"\nformat: \n  revealjs: \n    output-file: 09-data-types-classes-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    pdf-separate-fragments: true\n    toc: false\n  html: \n    code-link: true\nfilters: \n  - remove-fmt-skip.lua\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Warm-up\n\n## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n::: {.column width=\"70%\"}\n\n::: wooclap\n\nFill in the blanks:\n\nI'm a `_____` (first-year, sophomore, junior, senior)\n\nand on Tuesdays I have `_____` class(es).\n\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n\n:::\n\n## Announcements {.smaller}\n\n::: {.columns}\n::: {.column width=\"25%\"}\n\n**Survey:** Confidence in STEM courses at Duke\n\n![](images/09/alexa-qr.png){width=200px}\n\n:::\n\n::: {.column width=\"5%\"}\n\n:::\n\n::: {.column width=\"70%\" .fragment}\n\n**Exam 1:**\n\n- In class on Thu, Oct 2\n- Take home Thu, Oct 2 after class until Sat, Oct 4 at noon\n- Covers lectures 1-10, labs 1-4, and homeworks 1-3\n- Practice exam to be posted on Friday, exam review on Tue, Sep 30\n\n:::\n:::\n\n## Recap: The tidyverse package {.smaller}\n\nWhen you load the **tidyverse** package, you get access to a suite of packages that work well together for data manipulation and visualization:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\nâ”€â”€ Attaching core tidyverse packages â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse 2.0.0 â”€â”€\nâœ” dplyr     1.1.4          âœ” readr     2.1.5     \nâœ” forcats   1.0.0          âœ” stringr   1.5.1     \nâœ” ggplot2   3.5.2          âœ” tibble    3.3.0.9004\nâœ” lubridate 1.9.4          âœ” tidyr     1.3.1     \nâœ” purrr     1.1.0          \nâ”€â”€ Conflicts â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ tidyverse_conflicts() â”€â”€\nâœ– dplyr::filter() masks stats::filter()\nâœ– dplyr::lag()    masks stats::lag()\nâ„¹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors\n```\n\n\n:::\n:::\n\n\nYou never need to load one of these packages individually after you load the tidyverse, e.g.,\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(dplyr) # not necessary if you already loaded tidyverse in your document/session\n```\n:::\n\n\n## Recap: Loading packages {.smaller}\n\n- You only need to load a package once per R session or Quarto document.\n- It's good practice to load all the packages you need at the start of your document, that's why the templates I give you usually has a `load-packages` code cell at the top.\n\n\n::: {.cell}\n\n````{.cell-code}\n```{{r}}\n#| label: load-packages\n#| message: false\nlibrary(tidyverse)\nlibrary(ggthemes)\nlibrary(scales)\n# etc.\n```\n````\n:::\n\n\n- You never need to load these packages again further down in the same document.\n- If you need a new package further down in the document, go back and add it to the `load-packages` code cell.\n\n## Recap: Pipes\n\n::: center-align\n\n![](images/09/magritte-pipe.jpg){width=900px}\n\nThis is not a pipe.\n\n:::\n\n## Recap: Pipes\n\n::: center-align\n\n![](images/09/magrittr-pipe.png){width=900px}\n\nThis is not our pipe [operator].\n\n:::\n\n## Recap: Pipes\n\n::: center-align\n\n![](images/09/base-pipe.png){width=900px}\n\n**This is our a pipe [operator].**\n\n:::\n\n\n# Data types\n\n## How many classes do you have on Tuesdays?\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 86 Ã— 2\n   year       tue_classes\n   <chr>      <chr>      \n 1 Senior     3          \n 2 Sophomore  4          \n 3 Sophomore  3          \n 4 Junior     4          \n 5 Sophomore  2          \n 6 First-year 2          \n 7 Junior     2          \n 8 Sophomore  3          \n 9 First-year 2          \n10 Senior     3          \n# â„¹ 76 more rows\n```\n\n\n:::\n:::\n\n\n## Variable types\n\n::: question\nWhat type of variable is `tue_classes`?\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 86 Ã— 2\n   year       tue_classes\n   <chr>      <chr>      \n 1 Senior     3          \n 2 Sophomore  4          \n 3 Sophomore  3          \n 4 Junior     4          \n 5 Sophomore  2          \n 6 First-year 2          \n 7 Junior     2          \n 8 Sophomore  3          \n 9 First-year 2          \n10 Senior     3          \n# â„¹ 76 more rows\n```\n\n\n:::\n:::\n\n\n## Let's (attempt to) clean it up... {.scrollable}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey <- survey |>\n  mutate(\n    tue_classes = case_when(\n      tue_classes == \"one\" ~ \"1\",\n      tue_classes == \"two\" ~ \"2\",\n      tue_classes == \"Two\" ~ \"2\",\n      .default = tue_classes\n    ),\n    tue_classes = as.numeric(tue_classes),\n    year = case_when(\n      year == \"Sophmore\" ~ \"Sophomore\",\n      year == \"Freshman\" ~ \"First-year\",\n      .default = year\n    )\n  ) |>\n  filter(year != \"29.32%\")\n\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 85 Ã— 2\n   year       tue_classes\n   <chr>            <dbl>\n 1 Senior               3\n 2 Sophomore            4\n 3 Sophomore            3\n 4 Junior               4\n 5 Sophomore            2\n 6 First-year           2\n 7 Junior               2\n 8 Sophomore            3\n 9 First-year           2\n10 Senior               3\n# â„¹ 75 more rows\n```\n\n\n:::\n:::\n\n\n# Data types\n\n## Data types in R\n\n-   **logical**\n-   **double**\n-   **integer**\n-   **character**\n-   and some more, but we won't be focusing on those\n\n## Logical & character\n\n::::: columns\n::: column\n**logical** - Boolean values `TRUE` and `FALSE`\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(TRUE)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n**character** - character strings\n\n<br> <br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(\"First-year\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Double & integer\n\n::::: columns\n::: column\n**double** - floating point numerical values (default numerical type)\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(2.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n**integer** - integer numerical values (indicated with an `L`)\n\n<br>\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(1:3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Concatenation {.smaller}\n\nVectors can be constructed using the `c()` function.\n\n-   Numeric vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(1, 2, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Character vector:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(\"Hello\", \"World!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Hello\"  \"World!\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n-   Vector made of vectors:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(c(\"hi\", \"hello\"), c(\"bye\", \"jello\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"hi\"    \"hello\" \"bye\"   \"jello\"\n```\n\n\n:::\n:::\n\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- 1:3\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 2 3\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.character(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"1\" \"2\" \"3\"\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"character\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Converting between types\n\n::: hand\nwith intention...\n:::\n\n::::: columns\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nx <- c(TRUE, FALSE)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1]  TRUE FALSE\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(x)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"logical\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ny <- as.numeric(x)\ny\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 0\n```\n\n\n:::\n\n```{.r .cell-code}\ntypeof(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2, \"Just this one!\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"              \"Just this one!\"\n```\n\n\n:::\n:::\n\n\n. . .\n\nR will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!\n\n## Converting between types\n\n::: hand\nwithout intention...\n:::\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(FALSE, 3L)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0 3\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(FALSE, 1.2)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 0.0 1.2\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(2L, \"two\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2\"   \"two\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nc(TRUE, \"two\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"TRUE\" \"two\" \n```\n\n\n:::\n:::\n\n\n## Participate ðŸ“±ðŸ’»\n\n::: columns\n::: {.column width=\"70%\"}\n\n::: wooclap\n\nWhat is the output of `typeof(c(1.2, 3L))`?\n\n::: wooclap-choices\n- `\"character\"`\n- `\"double\"`\n- `\"integer\"`\n- `\"logical\"`\n:::\n\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n\n:::\n\n## Explicit vs. implicit coercion\n\n::::: columns\n::: column\n**Explicit coercion:**\n\nWhen you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`.\n:::\n\n::: {.column .fragment}\n**Implicit coercion:**\n\nHappens when you use a vector in a specific context that expects a certain type of vector.\n:::\n:::::\n\n# Data classes\n\n## Data classes {.smaller}\n\n::: incremental\n-   Vectors are like Lego building blocks\n-   We stick them together to build more complicated constructs, e.g. *representations of data*\n-   The **class** attribute relates to the S3 class of an object which determines its behaviour\n    -   You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious\n-   Examples: factors, dates, and data frames\n:::\n\n## Factors {.smaller}\n\nR uses factors to handle categorical variables, variables that have a fixed and known set of possible values\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass_years <- factor(\n  c(\n    \"First-year\",\n    \"Sophomore\",\n    \"Sophomore\",\n    \"Senior\",\n    \"Junior\"\n  )\n)\nclass_years\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] First-year Sophomore  Sophomore  Senior     Junior    \nLevels: First-year Junior Senior Sophomore\n```\n\n\n:::\n:::\n\n\n::::: columns\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: {.column .fragment}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## More on factors\n\nWe can think of factors like character (level labels) and an integer (level numbers) glued together\n\n\n::: {.cell}\n\n```{.r .cell-code}\nglimpse(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n Factor w/ 4 levels \"First-year\",\"Junior\",..: 1 4 4 3 2\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(class_years)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 1 4 4 3 2\n```\n\n\n:::\n:::\n\n\n## Dates\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntoday <- as.Date(\"2025-09-23\")\ntoday\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"2025-09-23\"\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"double\"\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"Date\"\n```\n\n\n:::\n:::\n\n\n## More on dates\n\nWe can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 20354\n```\n\n\n:::\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nas.integer(today) / 365 # roughly 55 yrs\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 55.76438\n```\n\n\n:::\n:::\n\n\n## Data frames\n\nWe can think of data frames like like vectors of equal length glued together\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf <- data.frame(x = 1:2, y = 3:4)\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n::::: columns\n::: column\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"list\"\n```\n\n\n:::\n:::\n\n\n:::\n\n::: column\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(df)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"data.frame\"\n```\n\n\n:::\n:::\n\n\n:::\n:::::\n\n## Lists {.smaller}\n\nLists are a generic vector container; vectors of any type can go in them\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4\"}\nl <- list(\n  x = 1:4,\n  y = c(\"hi\", \"hello\", \"jello\"),\n  z = c(TRUE, FALSE)\n)\nl\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n$x\n[1] 1 2 3 4\n\n$y\n[1] \"hi\"    \"hello\" \"jello\"\n\n$z\n[1]  TRUE FALSE\n```\n\n\n:::\n:::\n\n\n## Lists and data frames {.smaller}\n\n-   A data frame is a special list containing vectors of equal length\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n  x y\n1 1 3\n2 2 4\n```\n\n\n:::\n:::\n\n\n-   When we use the `pull()` function, we extract a vector from the data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndf |>\n  pull(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 3 4\n```\n\n\n:::\n:::\n\n\n# Working with factors\n\n## Read data in as character strings\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 85 Ã— 2\n   year       tue_classes\n   <chr>            <dbl>\n 1 Senior               3\n 2 Sophomore            4\n 3 Sophomore            3\n 4 Junior               4\n 5 Sophomore            2\n 6 First-year           2\n 7 Junior               2\n 8 Sophomore            3\n 9 First-year           2\n10 Senior               3\n# â„¹ 75 more rows\n```\n\n\n:::\n:::\n\n\n## But coerce when plotting\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(survey, mapping = aes(x = year)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](09-data-types-classes_files/figure-html/unnamed-chunk-40-1.png){width=100%}\n:::\n:::\n\n\n## Use forcats to reorder levels {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsurvey |>\n  mutate(\n    year = fct_relevel(year, \"First-year\", \"Sophomore\", \"Junior\", \"Senior\")\n  ) |>\n  ggplot(mapping = aes(x = year)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](09-data-types-classes_files/figure-html/unnamed-chunk-41-1.png){width=100%}\n:::\n:::\n\n\n## A peek into forcats {.smaller}\n\n::: columns\n::: {.column width=\"50%\" .fragment}\n\nReordering levels by:\n\n-   `fct_relevel()`: hand\n\n-   `fct_infreq()`: frequency\n\n-   `fct_reorder()`: sorting along another variable\n\n-   `fct_rev()`: reversing\n\n...\n\n:::\n::: {.column width=\"50%\" .fragment}\n\nChanging level values by:\n\n-   `fct_lump()`: lumping uncommon levels together into \"other\"\n\n-   `fct_other()`: manually replacing some levels with \"other\"\n\n...\n\n:::\n:::\n\n# Application exercise\n\n## ae\\-08\\-durham\\-climate\\-factors {.smaller}\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.\n\n-   If you haven't yet done so, click Pull to get today's application exercise file: *ae\\-08\\-durham\\-climate\\-factors\\.qmd*.\n\n-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.\n:::\n",
    "supporting": [
      "09-data-types-classes_files/figure-html"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}