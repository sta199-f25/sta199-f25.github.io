{
  "hash": "e28cb09f6dbdccf7759d151584bc87db",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Exam 1 review\"\nsubtitle: \"Lecture 11\"\ndate: \"2025-09-30\"\nformat: \n  revealjs: \n    output-file: 11-exam-1-review-slides.html\n    footer: \"[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)\"\n    theme: slides.scss\n    transition: fade\n    slide-number: true\n    logo: images/logo.png\n    pdf-separate-fragments: true\n    toc: false\n  html: \n    code-link: true\nfilters: \n  - ../remove-fmt-skip.lua\neditor_options: \n  chunk_output_type: console\n---\n\n\n\n# Warm-up\n\n## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n\n::: {.column width=\"70%\"}\n\n::: wooclap\n\nWhy is this a bad visualization for the data from lab yesterday?\n\n![](images/11/age-opinion.png)\n\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n\n:::\n\n## Announcements\n\n- Cheat sheet: 8.5x11, both sides, hand written or typed, any content you want, must be prepared by you\n\n- Bring a pencil and eraser (youâ€™re allowed to use a pen, but you might not want to)\n\n- Reminder: Academic dishonesty / Duke Community Standard\n\n# From last time\n\n## Finish up: `ae-08-durham-climate-factors`\n\n::: appex\n-   Go to your ae project in RStudio.\n\n-   Open `ae-08-durham-climate-factors.qmd` and pick up at \"Pivot\".\n:::\n\n# Joins\n\n\n\n## Setup {.smaller}\n\n::: {.columns}\n\n::: {.column width=\"55%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\nstudents <- tribble(\n  ~student_id, ~name,  ~major,\n  \"S001\",      \"Abby\", \"History\",\n  \"S002\",      \"Jinu\", \"Mathematics\",\n  \"S003\",      \"Mira\", \"Political Science\",\n  \"S004\",      \"Rumi\", \"Statistical Science\",\n  \"S005\",      \"Zoey\", \"Computer Science\"\n)\n```\n:::\n\n\n:::\n\n::: {.column width=\"45%\"}\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# fmt: skip\nenrollments <- tribble(\n  ~sid,   ~course,\n  \"S003\", \"POLSCI 175\",\n  \"S003\", \"STA 199\",\n  \"S003\", \"RELIGION 228\",\n  \"S004\", \"CS 201\",\n  \"S004\", \"STA 240\",\n  \"S004\", \"STA 221\",\n  \"S004\", \"THEATRST 202\",\n  \"S005\", \"CS 201\",\n  \"S005\", \"STA 199\",\n  \"S005\", \"RELIGION 228\",\n  \"S005\", \"THEATRST 202\"\n)\n```\n:::\n\n\n:::\n\n::: \n\n## Participate ðŸ“±ðŸ’» {.xsmall}\n\n::: columns\n\n::: {.column width=\"70%\"}\n\n::: wooclap\n\nWhat goes in the blank to get to find the courses that all `students` are enrolled in?\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |>\n  [BLANK](enrollments, by = join_by(student_id == sid))\n```\n:::\n\n\n::: wooclap-options\n-  `anti_join`\n-  `full_join`\n-  `inner_join`\n-  `left_join`\n-  `right_join`\n:::\n\n:::\n\n:::\n\n::: {.column width=\"30%\"}\n![](images/wooclap-qr.png){width=\"200\" fig-align=\"center\"}\n\n::: small\nScan the QR code or go to [app.wooclap.com/sta199](https://app.wooclap.com/sta199). Log in with your Duke NetID.\n:::\n\n:::\n\n:::\n\n## What type of join?\n\n::: question\nWhich type of join would you use to find the courses that all `students` are enrolled in?\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |>\n  left_join(enrollments, by = join_by(student_id == sid))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 13 Ã— 4\n   student_id name  major               course      \n   <chr>      <chr> <chr>               <chr>       \n 1 S001       Abby  History             <NA>        \n 2 S002       Jinu  Mathematics         <NA>        \n 3 S003       Mira  Political Science   POLSCI 175  \n 4 S003       Mira  Political Science   STA 199     \n 5 S003       Mira  Political Science   RELIGION 228\n 6 S004       Rumi  Statistical Science CS 201      \n 7 S004       Rumi  Statistical Science STA 240     \n 8 S004       Rumi  Statistical Science STA 221     \n 9 S004       Rumi  Statistical Science THEATRST 202\n10 S005       Zoey  Computer Science    CS 201      \n11 S005       Zoey  Computer Science    STA 199     \n12 S005       Zoey  Computer Science    RELIGION 228\n13 S005       Zoey  Computer Science    THEATRST 202\n```\n\n\n:::\n:::\n\n\n## What type of join?\n\n::: question\nWhich type of join would you use to find the `students` for whom we have enrollment information?\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |>\n  inner_join(enrollments, by = join_by(student_id == sid))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 11 Ã— 4\n   student_id name  major               course      \n   <chr>      <chr> <chr>               <chr>       \n 1 S003       Mira  Political Science   POLSCI 175  \n 2 S003       Mira  Political Science   STA 199     \n 3 S003       Mira  Political Science   RELIGION 228\n 4 S004       Rumi  Statistical Science CS 201      \n 5 S004       Rumi  Statistical Science STA 240     \n 6 S004       Rumi  Statistical Science STA 221     \n 7 S004       Rumi  Statistical Science THEATRST 202\n 8 S005       Zoey  Computer Science    CS 201      \n 9 S005       Zoey  Computer Science    STA 199     \n10 S005       Zoey  Computer Science    RELIGION 228\n11 S005       Zoey  Computer Science    THEATRST 202\n```\n\n\n:::\n:::\n\n\n## What type of join?\n\n::: question\nWhich type of join would you use to find the `students` for whom we have no enrollment information?\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstudents |>\n  anti_join(enrollments, by = join_by(student_id == sid))\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 2 Ã— 3\n  student_id name  major      \n  <chr>      <chr> <chr>      \n1 S001       Abby  History    \n2 S002       Jinu  Mathematics\n```\n\n\n:::\n:::\n\n\n# `if_else()` / `case_when()`\n\n## Collecting data {.smaller}\n\n::: question\nSuppose you conduct a survey and ask students their student ID number and number of credits they're taking this semester.\nWhat is the type of each variable?\n:::\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3\"}\nsurvey_raw <- tibble(\n  student_id = c(273674, 298765, 287129, \"I don't remember\"),\n  n_credits = c(4, 4.5, \"I'm not sure yet\", \"2 - underloading\")\n)\nsurvey_raw\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 2\n  student_id       n_credits       \n  <chr>            <chr>           \n1 273674           4               \n2 298765           4.5             \n3 287129           I'm not sure yet\n4 I don't remember 2 - underloading\n```\n\n\n:::\n:::\n\n\n## Cleaning data {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code  code-line-numbers=\"|2|3|4-8|9\"}\nsurvey <- survey_raw |>\n  mutate(\n    student_id = if_else(student_id == \"I don't remember\", NA, student_id),\n    n_credits = case_when(\n      n_credits == \"I'm not sure yet\" ~ NA,\n      n_credits == \"2 - underloading\" ~ \"2\",\n      .default = n_credits\n    ),\n    n_credits = as.numeric(n_credits)\n  )\nsurvey\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 4 Ã— 2\n  student_id n_credits\n  <chr>          <dbl>\n1 273674           4  \n2 298765           4.5\n3 287129          NA  \n4 <NA>             2  \n```\n\n\n:::\n:::\n\n\n## Type coercion\n\n::: incremental\n-   If variables in a data frame have multiple types of values, R will coerce them into a single type, which may or may not be what you want.\n\n-   If what R does by default is not what you want, you can use explicit coercion functions like `as.numeric()`, `as.character()`, etc. to turn them into the types you want them to be, which will generally also involve cleaning up the features of the data that caused the unwanted implicit coercion in the first place.\n:::\n\n# Aesthetic mappings\n\n## `openintro::loan50`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openintro)\nlibrary(ggthemes)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  select(annual_income, interest_rate, homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 50 Ã— 3\n   annual_income interest_rate homeownership\n           <dbl>         <dbl> <fct>        \n 1         59000         10.9  rent         \n 2         60000          9.92 rent         \n 3         75000         26.3  mortgage     \n 4         75000          9.92 rent         \n 5        254000          9.43 mortgage     \n 6         67000          9.92 mortgage     \n 7         28800         17.1  rent         \n 8         80000          6.08 mortgage     \n 9         34000          7.97 rent         \n10         80000         12.6  mortgage     \n# â„¹ 40 more rows\n```\n\n\n:::\n:::\n\n\n## Aesthetic mappings\n\n::: question\nWhat will the following code result in?\n:::\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  loan50,\n  aes(\n    x = annual_income,\n    y = interest_rate,\n    color = homeownership,\n    shape = homeownership\n  )\n) +\n  geom_point() +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/mapping-1.png){width=960}\n:::\n:::\n\n\n## Global mappings\n\n::: question\nWhat will the following code result in?\n:::\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  loan50,\n  aes(\n    x = annual_income,\n    y = interest_rate,\n    color = homeownership,\n    shape = homeownership\n  )\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/global-mapping-1.png){width=960}\n:::\n:::\n\n\n## Local mappings\n\n::: question\nWhat will the following code result in?\n:::\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  loan50,\n  aes(x = annual_income, y = interest_rate)\n) +\n  geom_point(aes(color = homeownership)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/mapping-local-1.png){width=960}\n:::\n:::\n\n\n## Mapping vs. setting\n\n::: question\nWhat will the following code result in?\n:::\n\n\n::: {.cell output-location='slide'}\n\n```{.r .cell-code}\nggplot(\n  loan50,\n  aes(x = annual_income, y = interest_rate)\n) +\n  geom_point(aes(color = homeownership)) +\n  geom_smooth(method = \"lm\", color = \"red\", se = FALSE) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output .cell-output-stderr}\n\n```\n`geom_smooth()` using formula = 'y ~ x'\n```\n\n\n:::\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/mapping-setting-1.png){width=960}\n:::\n:::\n\n\n## Recap: Aesthetic mappings\n\n::: incremental\n-   Aesthetic mapping defined at the *global* level will be used by all `geom`s for which the aesthetic is defined.\n\n-   Aesthetic mapping defined at the *local* level will be used only by the `geom`s they're defined for.\n:::\n\n## Aside: Legends\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code}\nggplot(\n  loan50,\n  aes(\n    x = annual_income,\n    y = interest_rate,\n    color = homeownership,\n    shape = homeownership\n  )\n) +\n  geom_point() +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/unnamed-chunk-12-1.png){width=768}\n:::\n:::\n\n\n## Aside: Legends {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|12\"}\nggplot(\n  loan50,\n  aes(\n    x = annual_income,\n    y = interest_rate,\n    color = homeownership,\n    shape = homeownership\n  )\n) +\n  geom_point() +\n  scale_color_colorblind() +\n  labs(color = \"Home ownership\")\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/unnamed-chunk-13-1.png){width=768}\n:::\n:::\n\n\n## Aside: Legends {.smaller}\n\n\n::: {.cell output-location='column'}\n\n```{.r .cell-code  code-line-numbers=\"|13-14\"}\nggplot(\n  loan50,\n  aes(\n    x = annual_income,\n    y = interest_rate,\n    color = homeownership,\n    shape = homeownership\n  )\n) +\n  geom_point() +\n  scale_color_colorblind() +\n  labs(\n    color = \"Home ownership\",\n    shape = \"Home ownership\"\n  )\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/unnamed-chunk-14-1.png){width=768}\n:::\n:::\n\n\n# Factors\n\n## Factors\n\n-   Factors are used for categorical variables -- variables that have a fixed and known set of possible values.\n\n-   They are also useful when you want to display character vectors in a non-alphabetical order.\n\n::: aside\nR4DS: <https://r4ds.hadley.nz/factors>.\n:::\n\n## Bar plot\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(loan50, aes(x = homeownership)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/unnamed-chunk-15-1.png){width=960}\n:::\n:::\n\n\n## Bar plot - reordered {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  mutate(\n    homeownership = fct_relevel(homeownership, \"mortgage\", \"rent\", \"own\")\n  ) |>\n  ggplot(aes(x = homeownership)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](11-exam-1-review_files/figure-revealjs/unnamed-chunk-16-1.png){width=960}\n:::\n:::\n\n\n## Frequency table\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  count(homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  homeownership     n\n  <fct>         <int>\n1 rent             21\n2 mortgage         26\n3 own               3\n```\n\n\n:::\n:::\n\n\n## Bar plot - reordered {.smaller}\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  mutate(\n    homeownership = fct_relevel(homeownership, \"own\", \"rent\", \"mortgage\")\n  ) |>\n  count(homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  homeownership     n\n  <fct>         <int>\n1 own               3\n2 rent             21\n3 mortgage         26\n```\n\n\n:::\n:::\n\n\n## Under the hood\n\n\n::: {.cell}\n\n```{.r .cell-code}\nclass(loan50$homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"factor\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\ntypeof(loan50$homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"integer\"\n```\n\n\n:::\n:::\n\n\n. . .\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlevels(loan50$homeownership)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] \"rent\"     \"mortgage\" \"own\"     \n```\n\n\n:::\n:::\n\n\n## Recap: Factors\n\n::: incremental\n-   The **forcats** package has a bunch of functions (that start with `fct_*()`) for dealing with factors and their levels: <https://forcats.tidyverse.org/reference/index.html>\n\n-   Factors and the order of their levels are relevant for displays (tables, plots) and they'll be relevant for modeling (later in the course)\n\n-   `factor` is a data **class**\n:::\n\n## Aside: `==`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  mutate(\n    homeownership_new = if_else(\n      homeownership == \"rent\",\n      \"don't own\",\n      homeownership\n    )\n  ) |>\n  distinct(homeownership, homeownership_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  homeownership homeownership_new\n  <fct>         <chr>            \n1 rent          don't own        \n2 mortgage      mortgage         \n3 own           own              \n```\n\n\n:::\n:::\n\n\n## Aside: `|`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  mutate(\n    homeownership_new = if_else(\n      homeownership == \"rent\" | homeownership == \"mortgage\",\n      \"don't own\",\n      homeownership\n    )\n  ) |>\n  distinct(homeownership, homeownership_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  homeownership homeownership_new\n  <fct>         <chr>            \n1 rent          don't own        \n2 mortgage      don't own        \n3 own           own              \n```\n\n\n:::\n:::\n\n\n## Aside: `%in%`\n\n\n::: {.cell}\n\n```{.r .cell-code}\nloan50 |>\n  mutate(\n    homeownership_new = if_else(\n      homeownership %in% c(\"rent\", \"mortgage\"),\n      \"don't own\",\n      homeownership\n    )\n  ) |>\n  distinct(homeownership, homeownership_new)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 3 Ã— 2\n  homeownership homeownership_new\n  <fct>         <chr>            \n1 rent          don't own        \n2 mortgage      don't own        \n3 own           own              \n```\n\n\n:::\n:::\n\n\n# Other questions?",
    "supporting": [
      "11-exam-1-review_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-after-body": [
        "\n<script>\n  // htmlwidgets need to know to resize themselves when slides are shown/hidden.\n  // Fire the \"slideenter\" event (handled by htmlwidgets.js) when the current\n  // slide changes (different for each slide format).\n  (function () {\n    // dispatch for htmlwidgets\n    function fireSlideEnter() {\n      const event = window.document.createEvent(\"Event\");\n      event.initEvent(\"slideenter\", true, true);\n      window.document.dispatchEvent(event);\n    }\n\n    function fireSlideChanged(previousSlide, currentSlide) {\n      fireSlideEnter();\n\n      // dispatch for shiny\n      if (window.jQuery) {\n        if (previousSlide) {\n          window.jQuery(previousSlide).trigger(\"hidden\");\n        }\n        if (currentSlide) {\n          window.jQuery(currentSlide).trigger(\"shown\");\n        }\n      }\n    }\n\n    // hookup for slidy\n    if (window.w3c_slidy) {\n      window.w3c_slidy.add_observer(function (slide_num) {\n        // slide_num starts at position 1\n        fireSlideChanged(null, w3c_slidy.slides[slide_num - 1]);\n      });\n    }\n\n  })();\n</script>\n\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}