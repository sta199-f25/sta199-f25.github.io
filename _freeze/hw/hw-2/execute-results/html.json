{
  "hash": "27f13deff5f7fb7610af5309e3c1d6c5",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: HW 2\nsubtitle: Deeper dive into Midwest and NC Counties\ndescription: \"Due: Sun, Sep 21, 11:59 pm\"\ncategories: HW\ndraft: true\n---\n\n# Introduction\n\nThis is a two-part homework assignment:\n\n- **Part 1 -- ü§ñ Feedback from AI:** Not graded, for practice, you get immediate feedback with AI, based on rubrics designed by the course instructor. Complete in `hw-2-part-1.qmd`, no submission required.\n\n- **Part 2 -- üßëüèΩ‚Äçüè´ Feedback from Humans:** Graded, you get feedback from the course instructional team within a week. Complete in `hw-2-part-2.qmd`, submit on Gradescope.\n\nBy now you should be familiar with how to get started with a homework assignment by cloning the GitHub repo for the assignment.\n\n<details>\n<summary>Click to expand if you need a refresher on how to get started with a homework assignment.</summary>\n\n-   Go to <https://cmgr.oit.duke.edu/containers> and login with your Duke NetID and Password.\n-   Click `STA199` under My reservations to log into your container. You should now see the RStudio environment.\n-   Go to the course organization at [github.com/sta199-f25](https://github.com/sta199-f25) organization on GitHub.\n    Click on the repo with the prefix **hw-2**.\n    It contains the starter documents you need to complete the homework.\n-   Click on the green **CODE** button, select **Use SSH**.\n    Click on the clipboard icon to copy the repo URL.\n-   In RStudio, go to *File* ‚ûõ *New Project* ‚ûõ*Version Control* ‚ûõ *Git*.\n-   Copy and paste the URL of your assignment repo into the dialog box *Repository URL*. Again, please make sure to have *SSH* highlighted under *Clone* when you copy the address.\n-   Click *Create Project*, and the files from your GitHub repo will be displayed in the *Files* pane in RStudio.\n</details>\n\nBy now you should also be familiar with guidelines for formatting your code and plots as well as your Git and Gradescope workflow.\n\n<details>\n<summary>Click to expand if you need a refresher on assignment guidelines.</summary>\n### Code\n\nCode should follow the [tidyverse style](https://style.tidyverse.org/).\nParticularly,\n\n-   there should be spaces before and line breaks after each `+` when building a `ggplot`,\n-   there should also be spaces before and line breaks after each `|>` in a data transformation pipeline,\n-   code should be properly indented,\n-   there should be spaces around `=` signs and spaces after commas.\n\nAdditionally, all code should be visible in the PDF output, i.e., should not run off the page on the PDF.\nLong lines that run off the page should be split across multiple lines with line breaks.\n\n### Plots\n\n-   Plots should have an informative title and, if needed, also a subtitle.\n-   Axes and legends should be labeled with both the variable name and its units (if applicable).\n-   Careful consideration should be given to aesthetic choices.\n\n### Workflow\n\nContinuing to develop a sound workflow for reproducible data analysis is important as you complete the lab and other assignments in this course.\n\n-   You should have at least 3 commits with meaningful commit messages by the end of the assignment.\n-   Final versions of both your `.qmd` file and the rendered PDF should be pushed to GitHub.\n\n</details>\n\n\n# Part 1 -- Feedback from AI\n\nYour answers to the questions in this part should go in the file `hw-2-part-1.qmd`.\n\n## Instructions\n\nWrite your answer to each question in the appropriate section of the `hw-2-part-1.qmd` file.\nThen, highlight your answer to a question, click on _Addins > AIFEEDR > Get feedback_.\nIn the app that opens, select the appropriate homework number (2) and question number.\nThen click on _Get Feedback_.\nPlease be patient, feedback generation can take a few seconds. \nOnce you read the feedback, you can go back to your Quarto document to improve your answer based on the feedback. \nYou will then need to click the red X on the top left corner of the Viewer pane to stop the feedback app from running before you can re-render your Quarto document.\n\n<details>\n<summary>Click to expand if you want to review the video that demonstrates how to use the AI feedback tool.</summary>\n{{< video https://www.youtube.com/embed/EyT6QQN1ouQ?si=DsG-laE30BykMJby title=\"aifeedr\">}}\n</details>\n\n## Packages\n\nIn this part you will work with the **tidyverse** package, which is a collection of packages for doing data analysis in a \"tidy\" way.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n## Data\n\nWe will use the `midwest` data frame once again for this homework.\nThe data contains demographic characteristics of counties in the Midwest region of the United States.\nBecause the data set is part of the **ggplot2** package, you can read documentation for the data set, including variable definitions by typing `?midwest` in the Console or searching for `midwest` in the Help pane.\n\n## Questions\n\n### Question 1\n\nCalculate the number of counties in each state and display your results in descending order of number of counties. \n\nWhich state has the highest number of counties, and how many? \n\nWhich state has the lowest number, and how many?\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 1\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 2\n\nWhile two counties in a given state can‚Äôt have the same name, some county names might be shared across states. A classmate says ‚ÄúLook at that, there is a county called `___` in each state in this dataset!‚Äù In a single pipeline, discover all counties that could fill in the blanks. Your response should be a data frame with only the county names that could fill in the blank and the number of times they appear in the data, and narrative stating the county names that could fill in this blank. \n\n::: callout-tip\nYou will want to use the `filter()` function in your answer, which requires a logical condition to describe what you want to filter for.\nFor example, `filter(x > 2)` means filter for values of `x` greater than 2, and `filter(y <= 3)` means filter for values of y less than or equal to 3.\n\nThe table below is a summary of logical operators and how to articulate them in R.\n\n| operator      | definition                |\n|---------------|---------------------------|\n| `<`           | less than                 |\n| `<=`          | less than or equal to     |\n| `>`           | greater than              |\n| `>=`          | greater than or equal to  |\n| `==`          | exactly equal to          |\n| `!=`          | not equal to              |\n| `x & y`       | `x` AND `y`               |\n| `x`¬†\\|¬†`y`    | `x` OR `y`                |\n| `is.na(x)`    | test if `x` is `NA`       |\n| `!is.na(x)`   | test if `x` is not `NA`   |\n| `x %in% y`    | test if `x` is in `y`     |\n| `!(x %in% y)` | test if `x` is not in `y` |\n| `!x`          | not `x`                   |\n:::\n\n::: callout-important\nIn describing a distribution, make sure to mention shape, center, spread, and any unusual observations.\n:::\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 2\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 3\n\nReturn to the following box plot of population densities where you were asked to identify at least one outlier.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](hw-2_files/figure-html/popdensity-boxplot-1.png){width=480}\n:::\n:::\n\n\nIn this question, we want you to revisit this box plot and identify the counties described in each section.\n\na. The counties with a population density higher than 25,000. Your code must use the `filter()` function.\n\nb. The county with the highest population density. Your code must use the `max()` function.\n\nAnswer using a single data wrangling pipeline for each part. Your response should be a data frame with five columns: county name, state name, population density, total population, and area, in this order. If your response has multiple rows, the data frame should be arranged in descending order of population density.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 3\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 4\n\nIn HW 1 you were also asked to describe the distribution of population densities.\nThe following is one acceptable description that touches on the shape, center, and spread of this distribution.\nCalculate the values that should go into the blanks.\n\n> The distribution of population density of counties is unimodal and extremely right-skewed. A typical Midwestern county has population density of `____` people per unit area. The middle 50% of the counties have population densities between `____` to `____` people per unit area.\n\n::: callout-tip\nThink about which measures of center and spread are appropriate for skewed distributions.\n:::\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.\n\nOnce again, make sure to commit and push all changed files so that your Git pane is empty afterwards.\n:::\n\n### Question 5\n\nAnother visualization from HW 1 was the following, which showed the proportion of urban counties in each state.\n\n\n::: {.cell}\n::: {.cell-output-display}\n![](hw-2_files/figure-html/metro-barplot-1.png){width=672}\n:::\n:::\n\n\nCalculate these proportions in a single data pipeline.\n\n::: callout-tip\nRemember, you'll first need to create a new variable called `metro` which takes on the value `Yes` if the value of `inmetro` is 1, and `No` otherwise.\nYou can refer to [HW 1](/hw/hw-1.html#question-5) if you need a refresher on how to do this.\n:::\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.\n\nAnd once again, make sure to commit and push all changed files so that your Git pane is empty afterward.\nWe keep repeating this because it's important and because we see students forget to do this.\nSo take a moment to make sure you're following along with the version control instructions.\n:::\n\n# Part 2 -- Feedback from Humans\n\nYour answers to the questions in this part should go in the file `hw-2-part-2.qmd`.\n\n## Question 6\n\nTO DO: Add Q.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 6\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n## Questions 7-10 -- Exploring NC Counties\n\n### Packages\n\nYou will use the **tidyverse** package for data wrangling and visualization, **scales** for better axis labels, and **ggthemes** for additional color palettes.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(scales)\nlibrary(ggthemes)\n```\n:::\n\n\n### Data\n\nFor the remaining questions on the homework, you will continue use data on counties in North Carolina that you used in HW 1.\n\nAs a reminder, the dataset contains information on North Carolina counties retrieved from the 2020 Census as well as from [myFutureNC Dashboard](https://dashboard.myfuturenc.org/county-data-and-resources/) maintained by Carolina Demography at the University of North Carolina at Chapel Hill.\n\nThis dataset is stored in a file called `nc-county.csv` in the `data` folder of your project/repository.\n\nThe variables in the dataset and their descriptions are as follows:\n\n-   `county`: Name of county.\n-   `land_area_m2`: Land area of county in meters-squared, based on the 2020 census.\n-   `land_area_mi2`: Land area of county in miles-squared, based on the 2020 census.\n-   `pop_2020`: Population of county, based on the 2020 Census.\n-   `pop_dens_2020`: Population density calculated as population (`pop_2020`) divided by land area in miles-squared (people per mile-squared).\n-   `county_type`: Peer county type classification based on population characteristics, socioeconomic status, and geographic features used for grouping counties with similar demographic, social, and economic characteristics, allowing them to be compared and benchmarked against one another.\n-   `median_hh_income`: Median household income.\n-   `p_foreign_born`: Percentage of population that is foreign-born.\n-   `p_child_poverty`: Percentage of children living in poverty.\n-   `p_single_parent_hh`: Percentage of households with children that are single-parent households.\n-   `p_broadband`: Percentage of households with broadband internet access.\n-   `p_home_ownership`: Percentage of homes that are owner-occupied.\n-   `p_family_sustaining_wage`: Percentage of adults that earn a family-sustaining wage -- typically a wage that covers essential costs like housing, food, childcare, transportation, and healthcare for a family's basic needs within a specific geographic area\n-   `p_edu_lths`: Percentage of 25-44-year-olds with less than a high school diploma.\n-   `p_edu_hsged`: Percentage of 25-44-year-olds with a high school diploma or equivalent.\n-   `p_edu_scnd`: Percentage of 25-44-year-olds with some college or an associate degree.\n-   `p_edu_ndc`: Percentage of 25-44-year-olds with non-degree credentials -- certifications, licenses, or other credentials that demonstrate specific skills or knowledge but do not confer a formal academic degree.\n-   `p_edu_assoc`: Percentage of 25-44-year-olds with an associate degree.\n-   `p_edu_ba`: Percentage of 25-44-year-olds with a bachelor's degree.\n-   `p_edu_mapl`: Percentage of 25-44-year-olds with a master's, professional, or doctoral degree.\n-   `p_edu_hs_grad_rate`: High school graduation rate.\n-   `p_edu_chronic_absent_rate`: Chronic absenteeism rate.\n\nJust like in lab, you can read this file into R with the following code:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nnc_county <- read_csv(\"data/nc-county.csv\")\n```\n:::\n\n\n\n\n### Question 7\n\nTO DO: Add Q.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with the commit message \"Added answer for Question 7\".\n\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n### Question 8\n\nTO DO: Add Q.\n\n::: render-commit-push\nNow is another good time to render, commit, and push your changes to GitHub with an informative and concise commit message.\n:::\n\n### Question 9\n\nTO DO: Add Q.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with an informative and concise commit message.\n:::\n\n### Question 10\n\nTO DO: Add Q.\n\n::: render-commit-push\nRender, commit, and push your changes to GitHub with an informative and concise commit message.\nMake sure to commit and push all changed files so that your Git pane is empty afterward.\n:::\n\n# Wrap-up\n\n::: callout-warning\nBefore you wrap up the assignment, make sure that you render, commit, and push one final time so that the final versions of both your `.qmd` file and the rendered PDF are pushed to GitHub and your Git pane is empty.\nWe will be checking these to make sure you have been practicing how to commit and push changes.\n:::\n\n## Submission\n\nSubmit your PDF document to Gradescope by the deadline to be considered \"on time\":\n\n-   Go to <http://www.gradescope.com> and click *Log in* in the top right corner.\n-   Click *School Credentials* $\\rightarrow$ *Duke NetID* and log in using your NetID credentials.\n-   Click on your *STA 199* course.\n-   Click on the assignment, and you'll be prompted to submit it.\n-   Mark all the pages associated with question. All the pages of your homework should be associated with at least one question (i.e., should be \"checked\").\n\n::: callout-important\n## Checklist\n\nMake sure you have:\n\n-   attempted all questions\n-   rendered your Quarto document\n-   committed and pushed everything to your GitHub repository such that the Git pane in RStudio is empty\n-   uploaded your PDF to Gradescope\n:::\n\n\n## Grading and feedback\n\n-   Questions 1-5 are not graded, but you should complete them to get practice.\n\n-   Questions 6-10 are graded, and you will receive feedback on Gradescope from the course instructional team within a week.\n    -   Questions will be graded for accuracy and completeness.\n    -   Partial credit will be given where appropriate.\n    -   There are also workflow points for:\n        - committing at least three times as you work through your lab,\n        - having your final version of `.qmd` and `.pdf` files in your GitHub repository, and\n        - overall organization.\n",
    "supporting": [
      "hw-2_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}