---
title: "Joining data"
subtitle: "Lecture 8"
date: "2025-09-18"
format: 
  revealjs: 
    output-file: 08-joining-data-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    pdf-separate-fragments: true
    toc: false
  html: 
    code-link: true
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-05-majors-tidy"
```

# Warm-up

## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}


## Announcements

-   1
-   2
-   ...

# From last time: Pivot wider

```{r}
library(tidyverse)
statsci <- read_csv("slides/data/statsci_clean.csv")
```

## We pivotted longer... what about wider? {.smaller}

::: columns
::: {.column width="65%"}

```{r}
#| echo: false
statsci |>
  select(1:10)
```

::: {.task .fragment}
Can we go the other direction?
:::
:::

::: {.column width="5%"}
âŸµ
:::

::: {.column width="30%"}

```{r}
#| echo: false
statsci |>
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric
  ) |>
  slice_head(n = 17)
```

:::
:::

## We pivotted longer... what about wider? {.smaller}

::: columns
::: {.column width="65%"}

```{r}
#| echo: false
statsci |>
  select(1:10)
```

::: task

```{r}
#| eval: false
statsci_longer |>
  pivot_wider(
    names_from = ____________,
    values_from = ___________,
  )
```

:::
:::

::: {.column width="5%"}
âŸµ
:::

::: {.column width="30%"}

```{r}
#| echo: false
statsci |>
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric
  ) |>
  slice_head(n = 17)
```

:::
:::

## Recap: Pivot {.smaller}

::: incremental
-   ***When should you pivot?*** If all of the data you need is in your data frame, but the columns you need don't exist, there is a good chance it's time to pivot!
-   ***Wide and long:*** Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   ***Pivot longer - data type:*** When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `
pivot_longer()
` function.
:::

## Recap: Plotting {.smaller}

::: incremental
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive.

-   However, you should always be critical of defaultsand see if you can improve the plot to better portray your data / results / what you want to communicate.
:::

# Recoding data

## What's going on in this plot? {.smaller}

::: question
Can you guess the variable plotted here?
:::

```{r}
#| echo: false
#| message: false
library(usmap)
library(scales)
library(scico)

states <- us_map(regions = "states")

sales_taxes <- read_csv("data/sales-taxes-25.csv")

states_sales_taxes <- states |>
  left_join(sales_taxes, join_by(full == state))

ggplot(states_sales_taxes) +
  geom_sf(aes(fill = state_tax_rate)) +
  scale_fill_scico(
    palette = "oslo",
    labels = label_percent(accuracy = 0.01)
  ) +
  theme_void() +
  coord_sf() +
  labs(fill = NULL)
```

## Sales taxes in US states

```{r}
sales_taxes
```

## Sales tax in swing states {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of swing states (Arizona, Georgia, Michigan, Nevada, North Carolina, Pennsylvania, and Wisconsin) vs. non-swing states.

How would you approach this task?
:::

. . .

-   Create a new variable called `swing_state` with levels `"Swing"` and `"Non-swing"`
-   Group by `swing_state`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `if_else()` {.smaller .scrollable}

::: task
Create a new variable called `swing_state` with levels `"Swing"` and `"Non-swing"`.
:::

```{r}
#| eval: false
list_of_swing_states <- c(___)

sales_taxes <- sales_taxes |>
  ___
```

## Recap: `if_else()`

``` r
if_else(
  x == y,               #<1>
  "x is equal to y",    #<2>
  "x is not equal to y" #<3>
)
```

1.  Condition
2.  Value if condition is `TRUE`
3.  Value if condition is `FALSE`

## Sales tax in swing states {.smaller .scrollable}

::: task
Compare the average state sales tax rates of swing states vs. non-swing states.
:::

```{r}
#| eval: false
sales_taxes |>
  ___ |>
  ___
```

## Sales tax in coastal states {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.

How would you approach this task?
:::

. . .

-   Create a new variable called `coast` with levels `"Pacific"`, `"Atlantic"`, and `"Neither"`
-   Group by `coast`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `case_when()` {.smaller .scrollable}

::: task
Create a new variable called `coast` with levels `"Pacific"`, `"Atlantic"`, and `"Neither"`.
:::

```{r}
#| eval: false
pacific_coast <- c("Alaska", "Washington", "Oregon", "California", "Hawaii")

atlantic_coast <- c(
  "Connecticut",
  "Delaware",
  "Georgia",
  "Florida",
  "Maine",
  "Maryland",
  "Massachusetts",
  "New Hampshire",
  "New Jersey",
  "New York",
  "North Carolina",
  "Rhode Island",
  "South Carolina",
  "Virginia"
)

sales_taxes <- sales_taxes |>
  ___
```

## Recap: `case_when()`

``` r
case_when(
  x > y  ~ "x is greater than y", #<1>
  x < y  ~ "x is less than y",    #<2>
  .default = "x is equal to y"    #<3>  
)
```

1.  Value if first condition is `TRUE`
2.  Value if second condition is `TRUE`
3.  Value if neither condition is `TRUE`, i.e., default value

## Sales tax in coastal states {.smaller .scrollable}

::: task
Compare the average state sales tax rates of states on the Pacific Coast, states on the Atlantic Coast, and the rest of the states.
:::

```{r}
#| eval: false
sales_taxes |>
  group_by(coast) |>
  summarize(mean_state_tax = mean(state_tax_rate))
```

## Sales tax in US regions {.smaller}

::: question
Suppose you're tasked with the following:

> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).

How would you approach this task?
:::

. . .

-   Create a new variable called `region` with levels `"Midwest"`, `"Northeast"`, `"South"`, and `"West"`.
-   Group by `region`
-   Summarize to find the mean sales tax in each type of state

## `mutate()` with `case_when()` {.smaller .scrollable}

::: question
Who feels like filling in the blanks lists of states in each region?
Who feels like it's simply too tedious to write out names of all states?
:::

```{r}
#| eval: false
list_of_midwest_states <- c(___)
list_of_northeast_states <- c(___)
list_of_south_states <- c(___)
list_of_west_states <- c(___)

sales_taxes <- sales_taxes |>
  mutate(
    coast = case_when(
      state %in% list_of_west_states ~ "Midwest",
      state %in% list_of_northeast_states ~ "Northeast",
      state %in% list_of_south_states ~ "South",
      state %in% list_of_west_states ~ "West"
    )
  )
```

# Joining data

## Why join? {.smaller}

Suppose we want to answer questions like:

> Is there a relationship between\
> - number of QS courses taken\
> - having scored a 4 or 5 on the AP stats exam\
> - motivation for taking course\
> - ...\
> and performance in this course?"

. . .

Each of these would require *join*ing class performance data with an outside data source so we can have all relevant information (columns) in a single data frame.

## Why join? {.smaller}

Suppose we want to answer questions like:

> Compare the average state sales tax rates of states in various regions (Midwest - 12 states, Northeast - 9 states, South - 16 states, West - 13 states).

. . .

This can also be solved with *join*ing region information with the state-level sales tax data.

## Setup

For the next few slides...

::: columns
::: {.column width="50%"}

```{r}
x <- tibble(
  id = c(1, 2, 3),
  value_x = c("x1", "x2", "x3")
)

x
```

:::

::: {.column width="50%"}

```{r}
y <- tibble(
  id = c(1, 2, 4),
  value_y = c("y1", "y2", "y4")
)

y
```

:::
:::

## `left_join()`

::: columns
::: {.column width="50%"}

![](images/07/left-join.gif)

:::

::: {.column width="50%"}

```{r}
left_join(x, y)
```

:::
:::

## `right_join()`

::: columns
::: {.column width="50%"}

![](images/07/right-join.gif)

:::

::: {.column width="50%"}

```{r}
right_join(x, y)
```

:::
:::

## `full_join()`

::: columns
::: {.column width="50%"}
![](images/07/full-join.gif)
:::

::: {.column width="50%"}

```{r}
full_join(x, y)
```

:::
:::

## `
inner_join()
`

::: columns
::: {.column width="50%"}
![](images/07/inner-join.gif)
:::

::: {.column width="50%"}

```{r}
inner_join(x, y)
```

:::
:::

## `semi_join()`

::: columns
::: {.column width="50%"}

![](images/07/semi-join.gif)

:::

::: {.column width="50%"}

```{r}
semi_join(x, y)
``
`
:::
:::

## `
anti_join()
`

::: columns
::: {.column width="50%"}

![](images/07/anti-join.gif)

:::

::: {.column width="50%"}

`
``
{
  r
}
anti_join(x, y)
```

:::
:::

# Application exercise

## Goal

Compare the average state sales tax rates of states in various regions (Midwest, Northeast, South, West), where the input data are:

1.  States and sales taxes
2.  States and regions

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::
