---
title: "Grammar of data visualization"
subtitle: "Lecture 3"
date: "2025-09-02"
format: 
  revealjs: 
    output-file: 03-grammar-of-data-visualization-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    toc: false
  html: 
    code-link: true
---

# Warm-up

## Announcements {.smaller}

-   Office hours are posted on the course website!

-   If you can follow along with today's application exercise steps, great!
    If something doesn't work as expected, ask me/TA during the exercise.
    We'll either:

    -   help you on the spot and get you unstuck or
    -   identify that you're missing an earlier step, ask you to follow along with your neighbor, and visit office hours before Thursday for one-on-one help

## Outline {.smaller}

-   Last time:

    -   We introduced you to the course toolkit.

    -   You **cloned** your `ae` repositories and started making some updates in your Quarto documents.

    -   You **committed and pushed** your changes back -- at least most of you did!

. . .

-   Today:

    -   You will wrap up that application exercis, and commit and push your final changes.

    -   We will introduce data visualization.

    -   You will **pull** to get today's application exercise file.

    -   You will work on the new application exercise on data visualization, **commit** your changes, and **push** them.

# From last time

## Tour: Quarto (and more Git + GitHub) {.smaller .scrollable}

::: appex
**Option 2:**

Go to RStudio and open the document `ae-01-income-inequality.qmd`.
:::

<br>

<details>
<summary>Tour recap: Quarto</summary>

![](images/03/tour-quarto.png){fig-alt="RStudio IDE with a Quarto document, source code on the left and output on the right. Annotated to show the YAML, a link, a header, and a code cell." fig-align="center"}

</details>

<br>

<details>
<summary>Tour recap: Git + GitHub</summary>

Once we made changes to our Quarto document, we

- went to the Git pane in RStudio

- staged our changes by clicking the checkboxes next to the relevant files

- committed our changes with an informative commit message

- pushed our changes to our application exercise repos

- confirmed on GitHub that we could see our changes pushed from RStudio

</details>

## How will we use Quarto?

-   Every application exercise, lab, project, etc. is an Quarto document
-   You'll always have a template Quarto document to start with
-   The amount of scaffolding in the template will decrease over the semester

## What's with all the hexes?

![](images/03/hexes.jpeg){fig-alt="Hex logos for many packages" fig-align="center"}

## We have hexes too!

::: task
Grab one before you leave!
:::

::: center-align
![](images/logo.png){fig-alt="STA 199 hex logo"}
:::

# Data visualization

## Participate ðŸ“±ðŸ’» {.smaller}

::: {.columns}

::: {.column width="70%"}

::: wooclap
Remember this visualization from the code along video -- what was it about?
:::

![](images/03/un-data-viz.png)

:::

::: {.column width="30%"}

{{< include _wooclap-column.qmd >}}

:::

::: 

## Let' see... {.center}

::: {.hand .large}
how the sausage is made!
:::

## Load packages

```{r}
#| label: load-packages
#| message: false
library(unvotes)
library(tidyverse)
library(ggthemes)
```

## Prepare the data {.smaller}

```{r}
#| label: un-data-prep
us_uk_tr_votes <- un_votes |>
  inner_join(un_roll_calls, by = "rcid") |>
  inner_join(un_roll_call_issues, by = "rcid", relationship = "many-to-many") |>
  filter(country %in% c("United Kingdom", "United States", "Turkey")) |>
  mutate(year = year(date)) |>
  group_by(country, year, issue) |>
  summarize(percent_yes = mean(vote == "yes"), .groups = "drop")
```

::: callout-note
Let's leave these details aside for a bit, we'll revisit this code at a later point in the semester.
For now, let's agree that we need to do some "data wrangling" to get the data into the right format for the plot we want to create.
Just note that we called the data frame we'll visualize `us_uk_tr_votes`.
:::

## View the data {.smaller}

```{r}
#| label: un-data-view
us_uk_tr_votes
```

## Visualize the data

```{r}
#| label: un-code-placeholder
# code to visualize the data
```

```{r}
#| label: un-data-viz
#| warning: false
#| fig-width: 9
#| fig-height: 4
#| fig-align: center
#| echo: false
ggplot(
  us_uk_tr_votes, 
  aes(x = year, y = percent_yes, color = country)
  ) +
  geom_point(alpha = 0.5) +
  geom_smooth(se = FALSE) +
  facet_wrap(~issue) +
  scale_color_colorblind() +
  labs(
    x = "Year", 
    y = "% yes", 
    color = "Country"
  ) +
  theme_minimal()
```

## Step 1. Prepare a canvas for plotting

```{r}
#| label: step-1
#| fig-width: 9
#| fig-height: 3
ggplot(data = us_uk_tr_votes)
```

## Step 2. Map variables to aesthetics {.smaller}

*Map* `year` to the `x` *aesthetic*

```{r}
#| label: step-2
#| fig-width: 9
#| fig-height: 3
ggplot(data = us_uk_tr_votes, mapping = aes(x = year))
```

## Step 3. Map variables to aesthetics {.smaller}

*Map* `percent_yes` to the `y` *aesthetic*

```{r}
#| label: step-3
#| fig-width: 9
#| fig-height: 3
ggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))
```

## Mapping and aesthetics {.smaller}

-   **Aesthetics** are visual properties of a plot

-   In the *grammar of graphics*, variables from the data frame are **map**ped to aesthetics

![](images/03/aesthetic-mapping.gif){fig-align="center"}

## Argument names {.smaller}

It's common practice in R to omit the names of first two arguments of a function:

. . .

-   Instead of:

``` r
ggplot(data = us_uk_tr_votes, mapping = aes(x = year, y = percent_yes))
```

-   We usually write:

``` r
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes))
```

## Step 4. Represent data on your canvas {.smaller}

with a `geom`

```{r}
#| label: step-4
#| fig-width: 9
#| fig-height: 3
#| code-line-numbers: "|2"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes)) +
  geom_point()
```

## Step 5. Map variables to aesthetics {.smaller}

*Map* `country` to the `color` *aesthetic*

```{r}
#| label: step-5
#| fig-width: 9
#| fig-height: 3
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point()
```

## Step 6. Represent data on your canvas {.smaller}

with another `geom`

```{r}
#| label: step-6
#| fig-width: 9
#| fig-height: 3
#| code-line-numbers: "|3"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point() +
  geom_smooth()
```

## Warnings and messages

-   Adding `geom_smooth()` resulted in the following warning:

```         
`geom_smooth()` using method = 'loess' and formula = 'y ~ x'
```

. . .

-   It tells us the type of smoothing ggplot2 does under the hood when drawing the smooth curves that represent trends for each country.

. . .

-   Going forward we'll suppress this warning to save some space.

## Step 7. Split plot into facets

```{r}
#| label: step-7
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|4"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(~issue)
```

## Step 8. Use a different color scale

```{r}
#| label: step-8
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|5"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(~issue) +
  scale_color_colorblind()
```

## Step 9. Apply a different theme

```{r}
#| label: step-9
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|6"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(~issue) +
  scale_color_colorblind() +
  theme_minimal()
```

## Step 10. Add labels

```{r}
#| label: step-10
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|7"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point() +
  geom_smooth() +
  facet_wrap(~issue) +
  scale_color_colorblind() +
  theme_minimal() +
  labs(x = "Year", y = "% yes", color = "Country")
```

## Participate ðŸ“±ðŸ’» {.smaller}

::: {.columns}

::: {.column width="70%"}

::: wooclap
Which of the following modifications will change the transparency of the points in the plot?
:::

![](images/03/un-data-viz.png)

:::

::: {.column width="30%"}

{{< include _wooclap-column.qmd >}}

:::

::: 

## Step 11. Set transparency of points

with `alpha`

```{r}
#| label: step-11
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|2"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point(alpha = 0.5) +
  geom_smooth() +
  facet_wrap(~issue) +
  scale_color_colorblind() +
  theme_minimal() +
  labs(x = "Year", y = "% yes", color = "Country")
```

## Step 12. Hide standard errors of curves

with `se = FALSE`

```{r}
#| label: step-12
#| fig-width: 9
#| fig-height: 3
#| warning: false
#| code-line-numbers: "|3"
ggplot(us_uk_tr_votes, aes(x = year, y = percent_yes, color = country)) +
  geom_point(alpha = 0.5) +
  geom_smooth(se = FALSE) +
  facet_wrap(~issue) +
  scale_color_colorblind() +
  theme_minimal() +
  labs(x = "Year", y = "% yes", color = "Country")
```

## Grammar of graphics {.smaller}

::: columns
::: {.column width="50%"}
We built a plot layer-by-layer

-   just like described in the book *The Grammar of Graphics* and
-   implemented in the **ggplot2** package, the data visualization package of the tidyverse.
:::

::: {.column width="20%"}
![](images/03/gg-book.png)
:::

::: {.column width="30%"}
![](images/03/gg-layers.png)
:::
:::

# Application exercise

## `ae-02-bechdel-dataviz` {.smaller}

::: appex
-   Go to your `ae` project in RStudio.
-   Make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.
-   If you haven't yet done so, click **Pull** to get today's application exercise file.
-   Work through the application exercise in class, and **render, commit, and push** your edits by the end of class.
:::

## Recap {.smaller}

-   Construct plots with `ggplot()`.
-   Layers of ggplots are separated by `+`s.
-   The formula is (almost) always as follows:

```{r}
#| label: ggplot-template
#| eval: false
ggplot(DATA, aes(x = X-VAR, y = Y-VAR, ...)) +
  geom_XXX()
```
