---
title: "Data types and classes"
subtitle: "Lecture 9"
date: "2025-09-23"
format: 
  revealjs: 
    output-file: 09-data-types-classes-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    pdf-separate-fragments: true
    toc: false
  html: 
    code-link: true
filters: 
  - remove-fmt-skip.lua
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-07-durham-climate-factors"
```

# Warm-up

## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}

::: columns
::: {.column width="70%"}

::: wooclap

Fill in the blanks:

I'm a `_____` (first-year, sophomore, junior, senior)

and on Tuesdays I have `_____` class(es).

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## Announcements {.smaller}

::: {.columns}
::: {.column width="25%"}

**Survey:** Confidence in STEM courses at Duke

![](images/09/alexa-qr.png){width=200px}

:::

::: {.column width="5%"}

:::

::: {.column width="70%" .fragment}

**Exam 1:**

- In class on Thu, Oct 2
- Take home Thu, Oct 2 after class until Sat, Oct 4 at noon
- Covers lectures 1-10, labs 1-4, and homeworks 1-3
- Practice exam to be posted on Friday, exam review on Tue, Sep 30

:::
:::

## Recap: The tidyverse package {.smaller}

When you load the **tidyverse** package, you get access to a suite of packages that work well together for data manipulation and visualization:

```{r}
library(tidyverse)
```

You never need to load one of these packages individually after you load the tidyverse, e.g.,

```{r}
library(dplyr) # not necessary if you already loaded tidyverse in your document/session
```

## Recap: Loading packages {.smaller}

- You only need to load a package once per R session or Quarto document.
- It's good practice to load all the packages you need at the start of your document, that's why the templates I give you usually has a `load-packages` code cell at the top.

```{r}
#| echo: fenced
#| label: load-packages
#| message: false
library(tidyverse)
library(ggthemes)
library(scales)
# etc.
```

- You never need to load these packages again further down in the same document.
- If you need a new package further down in the document, go back and add it to the `load-packages` code cell.

## Recap: Pipes

::: center-align

![](images/09/magritte-pipe.jpg){width=900px}

This is not a pipe.

:::

## Recap: Pipes

::: center-align

![](images/09/magrittr-pipe.png){width=900px}

This is not our pipe [operator].

:::

## Recap: Pipes

::: center-align

![](images/09/base-pipe.png){width=900px}

**This is our a pipe [operator].**

:::


# Data types

## How many classes do you have on Tuesdays?

```{r}
#| include: false
library(tidyverse)
survey <- read_csv(
  "data/survey-2025-09-23.csv",
  na = c("", "/"),
  col_names = "response",
  skip = 1
) |>
  mutate(response = str_remove(response, "^X - |^V - ")) |>
  separate_wider_delim(
    response,
    delim = " / ",
    names = c("tue_classes", "year")
  ) |>
  mutate(year = str_to_sentence(year))
```

```{r}
survey
```

## Variable types

::: question
What type of variable is `tue_classes`?
:::

```{r}
survey
```

## Let's (attempt to) clean it up... {.scrollable}

```{r}
survey <- survey |>
  mutate(
    tue_classes = case_when(
      tue_classes == "three" ~ "3",
      # add more conditions as needed
      .default = tue_classes
    ),
    tue_classes = as.numeric(tue_classes)
  )

survey
```

# Data types

## Data types in R

-   **logical**
-   **double**
-   **integer**
-   **character**
-   and some more, but we won't be focusing on those

## Logical & character

::::: columns
::: column
**logical** - Boolean values `TRUE` and `FALSE`

<br>

```{r}
typeof(TRUE)
```

:::

::: {.column .fragment}
**character** - character strings

<br> <br>

```{r}
typeof("First-year")
```

:::
:::::

## Double & integer

::::: columns
::: column
**double** - floating point numerical values (default numerical type)

<br>

```{r}
typeof(2.5)
typeof(3)
```

:::

::: {.column .fragment}
**integer** - integer numerical values (indicated with an `L`)

<br>

```{r}
typeof(3L)
typeof(1:3)
```

:::
:::::

## Concatenation {.smaller}

Vectors can be constructed using the `c()` function.

-   Numeric vector:

```{r}
c(1, 2, 3)
```

. . .

-   Character vector:

```{r}
c("Hello", "World!")
```

. . .

-   Vector made of vectors:

```{r}
c(c("hi", "hello"), c("bye", "jello"))
```

## Converting between types

::: hand
with intention...
:::

::::: columns
::: column

```{r}
x <- 1:3
x
typeof(x)
```

:::

::: {.column .fragment}

```{r}
y <- as.character(x)
y
typeof(y)
```

:::
:::::

## Converting between types

::: hand
with intention...
:::

::::: columns
::: column

```{r}
x <- c(TRUE, FALSE)
x
typeof(x)
```

:::

::: {.column .fragment}

```{r}
y <- as.numeric(x)
y
typeof(y)
```

:::
:::::

## Converting between types

::: hand
without intention...
:::


```{r}
c(2, "Just this one!")
```

. . .

R will happily convert between various types without complaint when different types of data are concatenated in a vector, and that's not always a great thing!

## Converting between types

::: hand
without intention...
:::

```{r}
c(FALSE, 3L)
```

. . .

```{r}
c(FALSE, 1.2)
```

. . .

```{r}
c(2L, "two")
```

. . .

```{r}
c(TRUE, "two")
```

## Participate ðŸ“±ðŸ’»

::: columns
::: {.column width="70%"}

::: wooclap

What is the output of `typeof(c(1.2, 3L))`?

::: wooclap-choices
- `"character"`
- `"double"`
- `"integer"`
- `"logical"`
:::

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## Explicit vs. implicit coercion

::::: columns
::: column
**Explicit coercion:**

When you call a function like `as.logical()`, `as.numeric()`, `as.integer()`, `as.double()`, or `as.character()`.
:::

::: {.column .fragment}
**Implicit coercion:**

Happens when you use a vector in a specific context that expects a certain type of vector.
:::
:::::

# Data classes

## Data classes {.smaller}

::: incremental
-   Vectors are like Lego building blocks
-   We stick them together to build more complicated constructs, e.g. *representations of data*
-   The **class** attribute relates to the S3 class of an object which determines its behaviour
    -   You don't need to worry about what S3 classes really mean, but you can read more about it [here](https://adv-r.hadley.nz/s3.html#s3-classes) if you're curious
-   Examples: factors, dates, and data frames
:::

## Factors {.smaller}

R uses factors to handle categorical variables, variables that have a fixed and known set of possible values

```{r}
class_years <- factor(
  c(
    "First-year",
    "Sophomore",
    "Sophomore",
    "Senior",
    "Junior"
  )
)
class_years
```

::::: columns
::: {.column .fragment}

```{r}
typeof(class_years)
```

:::

::: {.column .fragment}

```{r}
class(class_years)
```

:::
:::::

## More on factors

We can think of factors like character (level labels) and an integer (level numbers) glued together

```{r}
glimpse(class_years)
```

```{r}
as.integer(class_years)
```

## Dates

```{r}
today <- as.Date("2025-09-23")
today
```

```{r}
typeof(today)
```

```{r}
class(today)
```

## More on dates

We can think of dates like an integer (the number of days since the origin, 1 Jan 1970) and an integer (the origin) glued together

```{r}
as.integer(today)
```

```{r}
as.integer(today) / 365 # roughly 55 yrs
```

## Data frames

We can think of data frames like like vectors of equal length glued together

```{r}
df <- data.frame(x = 1:2, y = 3:4)
df
```

::::: columns
::: column
```{r}
typeof(df)
```

:::

::: column

```{r}
class(df)
```

:::
:::::

## Lists {.smaller}

Lists are a generic vector container; vectors of any type can go in them

```{r}
#| code-line-numbers: "|2|3|4"
l <- list(
  x = 1:4,
  y = c("hi", "hello", "jello"),
  z = c(TRUE, FALSE)
)
l
```

## Lists and data frames {.smaller}

-   A data frame is a special list containing vectors of equal length

```{r}
df
```

-   When we use the `pull()` function, we extract a vector from the data frame

```{r}
df |>
  pull(y)
```

# Working with factors

## Read data in as character strings

```{r}
#| message: false
survey
```

## But coerce when plotting

```{r}
#| out-width: 100%
#| fig-width: 7
#| fig-asp: 0.5
ggplot(survey, mapping = aes(x = year)) +
  geom_bar()
```

## Use forcats to reorder levels {.smaller}

```{r}
#| out-width: 100%
#| fig-width: 7
#| fig-asp: 0.5
survey |>
  mutate(
    year = fct_relevel(year, "First-year", "Sophomore", "Junior", "Senior")
  ) |>
  ggplot(mapping = aes(x = year)) +
  geom_bar()
```

## A peek into forcats {.smaller}

::: columns
::: {.column width="50%" .fragment}

Reordering levels by:

-   `fct_relevel()`: hand

-   `fct_infreq()`: frequency

-   `fct_reorder()`: sorting along another variable

-   `fct_rev()`: reversing

...

:::
::: {.column width="50%" .fragment}

Changing level values by:

-   `fct_lump()`: lumping uncommon levels together into "other"

-   `fct_other()`: manually replacing some levels with "other"

...

:::
:::

# Application exercise

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::
