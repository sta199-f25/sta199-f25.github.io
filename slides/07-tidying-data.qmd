---
title: "Tidying data"
subtitle: "Lecture 7"
date: "2025-09-16"
author: "Guest lecture by Marie Neubrander <br><br>Dr. Mine Ã‡etinkaya-Rundel"
format: 
  revealjs: 
    output-file: 07-tidying-data-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    toc: false
  html: 
    code-link: true
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-05-majors-tidy"
```

# Warm-up

## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}

```{r}
#| include: false
library(tidyverse)
library(usdata)
library(ggbeeswarm)
```

::: {.columns}

::: {.column width="85%"}

::: wooclap
Which of the following plots does this code produce?

```{r}
#| echo: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))
```

```{r}
#| fig.show: hide
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm() +
  labs(title = "O")
```

```{r}
#| fig-asp: 0.4
#| fig-width: 5
#| echo: false
#| layout-ncol: 2
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm() +
  labs(title = "o A")

ggplot(gerrymander, aes(x = gerry, y = clinton16), color = gerry) +
  geom_boxplot() +
  geom_beeswarm() +
  labs(title = "o B")

ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(fill = gerry)) +
  labs(title = "o C")

ggplot(gerrymander, aes(x = gerry, y = clinton16, color = gerry)) +
  geom_boxplot() +
  geom_beeswarm() +
  labs(title = "o D")
```

:::

:::

::: {.column width="15%"}

{{< include _wooclap-column.qmd >}}

:::

::: 


## Announcements

- 1
- 2
- ...

## Recap: layering geoms {.scrollable .smaller}

::: columns
::: {.column width="60%"}
::: task
Update the following code to create the visualization on the right.
:::

:::

::: {.column width="40%"}
![](images/07/gerrymander-recreate.png)
:::
:::

```{r}
#| message: false
#| fig-asp: 0.3
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm()
```

## Recap: layering geoms {.smaller}

1. Swap the order of the two geoms.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|2,3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry))
```

## Recap: layering geoms {.smaller}

2. Make the boxplots semi-transparent.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry), alpha = 0.5)
```

## Recap: layering geoms {.smaller}

3. Remove the legend.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry), alpha = 0.5, show.legend = FALSE)
```

## Recap: logical operators {.smaller}

Generally useful in a `filter()` but will come up in various other places as well...

| operator | definition                                |
|:---------|:------------------------------------------|
| `<`      | [is less than?]{.fragment}                |
| `<=`     | [is less than or equal to?]{.fragment}    |
| `>`      | [is greater than?]{.fragment}             |
| `>=`     | [is greater than or equal to?]{.fragment} |
| `==`     | [is exactly equal to?]{.fragment}         |
| `!=`     | [is not equal to?]{.fragment}             |

: {tbl-colwidths="\[25,75\]"}

## Recap: logical operators (cont.) {.smaller}

Generally useful in a `filter()` but will come up in various other places as well...

| operator      | definition                                                            |
|:--------------|:----------------------------------------------------------------------|
| `x & y`       | [is x AND y?]{.fragment}                                              |
| `x \| y`      | [is x OR y?]{.fragment}                                               |
| `is.na(x)`    | [is x NA?]{.fragment}                                                 |
| `!is.na(x)`   | [is x not NA?]{.fragment}                                             |
| `x %in% y`    | [is x in y?]{.fragment}                                               |
| `!(x %in% y)` | [is x not in y?]{.fragment}                                           |
| `!x`          | [is not x? (only makes sense if `x` is `TRUE` or `FALSE`)]{.fragment} |

: {tbl-colwidths="\[25,75\]"}

# Data tidying

## Tidy data

> "Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table."
>
> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>

. . .

**Note:** "easy to manipulate" = "straightforward to manipulate"

## Goal

Visualize StatSci majors over the years!

![](images/07/statsci-majors.png)

**TO DO:** Update with plot from end of AE

## Data {.smaller}

```{r}
#| include: false
statsci <- read_csv("data/statsci.csv")
statsci
```

-   The first column (variable) is the `degree`, and there are 4 possible degrees: BS (Bachelor of Science), BS2 (Bachelor of Science, 2nd major), AB (Bachelor of Arts), AB2 (Bachelor of Arts, 2nd major).

-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2025.

## Let's plan! {.smaller .nostretch}

::: question
Review the goal plot and sketch the data frame needed to make the plot.
Determine rows and columns of the data frame.
*Hint:* Data need to be in columns to map to `aes`thetic elements of the plot.
:::

![](images/07/statsci-majors.png){width="500"}

# Pivot

## `pivot_longer()` {.smaller .scrollable}

::: task
Pivot the `statsci` data frame *longer* such that each row represents a degree type / year combination and `year` and `n`umber of graduates for that year are columns in the data frame.
:::

```{r}
# add code here
```

## `year`

::: question
What is the type of the `year` variable?
Why?
What should it be?
:::

. . .

It's a character (`chr`) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years.
The variable type should be numeric.

## `pivot_longer()` again {.smaller .scrollable}

::: question
Start over with pivoting, and this time also make sure `year` is a numerical variable in the resulting data frame.
:::

```{r}
#| eval: false
statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    # ???
  )
```

## `NA` counts

::: question
What does an `NA` mean in this context?
*Hint:* The data come from the university registrar, and they have records on every single graduates, there shouldn't be anything "unknown" to them about who graduated when.
:::

. . .

`NA`s should actually be 0s.

## Clean-up {.smaller .scrollable}

::: task
Add on to your pipeline that you started with pivoting and convert `NA`s in `n` to `0`s.
:::

```{r}
#| eval: false
statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  # ???
```

## More clean-up {.smaller .scrollable}

::: task
In our plot the degree types are BS, BS2, AB, and AB2.
This information is in our dataset, in the `degree` column, but this column also has additional characters we don't need.
Create a new column called `degree_type` with levels BS, BS2, AB, and AB2 (in this order) based on `degree`.
Do this by adding on to your pipeline from earlier.
:::

```{r}
#| eval: false
statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  # ???
```

## Finish {.smaller .scrollable}

::: task
Now that you have your data pivoting and cleaning pipeline figured out, save the resulting data frame as `statsci_longer`.
:::

```{r}
#| eval: false
statsci |>
  pivot_longer(
    cols = -degree,
    names_to = "year",
    names_transform = as.numeric,
    values_to = "n"
  ) |>
  mutate(n = if_else(is.na(n), 0, n)) |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  )
```

# Application exercise

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::

## Recap: pivoting {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::
