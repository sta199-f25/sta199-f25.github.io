---
title: "Tidying data"
subtitle: "Lecture 7"
date: "2025-09-16"
author: "Guest lecture by Marie Neubrander <br><br>Dr. Mine Ã‡etinkaya-Rundel"
format: 
  revealjs: 
    output-file: 07-tidying-data-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    toc: false
  html: 
    code-link: true
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-05-majors-tidy"
```

# Warm-up

## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}

```{r}
#| include: false
library(tidyverse)
library(usdata)
library(ggbeeswarm)
```

```{r}
#| include: false

#code used for saving statsci_clean
statsci <- read_csv("data/statsci.csv")

statsci_clean <- statsci |>
  separate(degree, sep = " \\(", into = c("major", "degree_type")) |>
  mutate(
    degree_type = str_remove(degree_type, "\\)"),
    degree_type = fct_relevel(degree_type, "BS", "BS2", "AB", "AB2")
  )


statsci_clean <- statsci_clean |> select(-major)
statsci_clean <- replace(statsci_clean, is.na(statsci_clean), 0)
#write_csv(statsci_clean, "data/statsci_clean.csv")


```

::: {.columns}

::: {.column width="85%"}

::: wooclap
Which of the following plots does this code produce?

```{r}
#| echo: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 16))
```

```{r}
#| fig.show: hide
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm()
```

```{r}
#| fig-asp: 0.4
#| fig-width: 5
#| echo: false
#| layout-ncol: 2
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm() +
  labs(title = "o A")

ggplot(gerrymander, aes(x = gerry, y = clinton16), color = gerry) +
  geom_boxplot() +
  geom_beeswarm() +
  labs(title = "o B")

ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(fill = gerry)) +
  labs(title = "o C")

ggplot(gerrymander, aes(x = gerry, y = clinton16, color = gerry)) +
  geom_boxplot() +
  geom_beeswarm() +
  labs(title = "o D")
```

:::

:::

::: {.column width="15%"}

{{< include _wooclap-column.qmd >}}

:::

::: 


## Announcements

- 1
- 2
- ...

## Recap: layering geoms {.scrollable .smaller}

::: columns
::: {.column width="60%"}
::: task
Update the following code to create the visualization on the right.
:::

:::

::: {.column width="40%"}
![](images/07/gerrymander-recreate.png)
:::
:::

```{r}
#| message: false
#| fig-asp: 0.3
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_boxplot(aes(color = gerry)) +
  geom_beeswarm()
```

## Recap: layering geoms {.smaller}

1. Swap the order of the two geoms.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|2,3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry))
```

## Recap: layering geoms {.smaller}

2. Make the boxplots semi-transparent.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry), alpha = 0.5)
```

## Recap: layering geoms {.smaller}

3. Remove the legend.

```{r}
#| message: false
#| fig-asp: 0.4
#| code-line-numbers: "|3"
ggplot(gerrymander, aes(x = gerry, y = clinton16)) +
  geom_beeswarm() +
  geom_boxplot(aes(color = gerry), alpha = 0.5, show.legend = FALSE)
```

## Recap: logical operators {.smaller}

Generally useful in a `filter()` but will come up in various other places as well...

| operator | definition                                |
|:---------|:------------------------------------------|
| `<`      | [is less than?]{.fragment}                |
| `>`      | [is greater than?]{.fragment}             |

: {tbl-colwidths="\[25,75\]"}

## Recap: Participate ðŸ“±ðŸ’» {.xsmall}

::: {.columns}

::: {.column width="70%"}

::: wooclap
Match the following logical operators to their definitions.

::: wooclap-choices
- `<=`
- `>=`
- `==`
- `!=`
:::

:::

:::

::: {.column width="30%"}

{{< include _wooclap-column.qmd >}}

:::

:::

## Recap: Participate ðŸ“±ðŸ’» {.xsmall}

::: {.columns}

::: {.column width="70%"}

::: wooclap
Match the following definitions to their logical operators.

::: wooclap-choices
- is x AND y?
- is x OR y?
- is x NA?
- is x not NA?
:::

:::

:::

::: {.column width="30%"}

{{< include _wooclap-column.qmd >}}

:::

:::

## Recap: logical operators (cont.) {.smaller}

Other useful logical operators:

| operator      | definition                                                            |
|:--------------|:----------------------------------------------------------------------|
| `x %in% y`    | [is x in y?]{.fragment}                                               |
| `!(x %in% y)` | [is x not in y?]{.fragment}                                           |
| `!x`          | [is not x? (only makes sense if `x` is `TRUE` or `FALSE`)]{.fragment} |

: {tbl-colwidths="\[25,75\]"}


# Data tidying

## Tidy data

> "Tidy datasets are easy to manipulate, model and visualise, and have a specific structure: each variable is a column, each observation is a row, and each type of observational unit is a table."
>
> Tidy Data, <https://vita.had.co.nz/papers/tidy-data.pdf>

. . .

**Note:** "easy to manipulate" = "straightforward to manipulate"

## Goal

Visualize StatSci majors over the years!

![](images/07/statsci-majors.png)

**TO DO:** Update with plot from end of AE

## Data {.smaller}

```{r}
#| include: false
statsci <- read_csv("data/statsci_clean.csv")
```
```{r}
#| label: statsci-display

statsci
```

. . . 

::: incremental
-   The first column (variable) is the `degree`: 

    ::: {.small}
    - BS (Bachelor of Science)
    - BS2 (Bachelor of Science, 2nd major)
    - AB (Bachelor of Arts)
    - AB2 (Bachelor of Arts, 2nd major)
    :::
    
-   The remaining columns show the number of students graduating with that major in a given academic year from 2011 to 2025.
:::

## Let's plan! {.smaller .nostretch}

Review the goal plot and sketch the data frame needed to create it.
What would go inside `aes` when we call `ggplot`?


![](images/07/statsci-majors.png){width="500"}

## The Goal {.smaller .nostretch}

We want to write code that starts something like this:

```{r}
#| eval: false

ggplot(statsci, aes(x = year, y = n, color = degree_type)) + 
  ...

```


. . . 


<br>


But our data are not in the right format :(

```{r}
statsci
```

## The Challenge {.smaller .nostretch}

::: {.columns}

::: {.column width="70%"}

***How do we go from this ....***

```{r}
#| echo: false
cat("# A tibble: 4 x 16")
statsci |> 
  select(1:10) |> 
  as.data.frame()
```

:::


::: {.column .fragment width="30%"}

***.... to this??***



```{r}
#| echo: false
cat("# A tibble: 60 x 3")
print(statsci |>
        pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric) |>
      slice_head(n = 17) |>
        as.data.frame())
```
::: 
:::


# Pivot

## `pivot_longer()` {.smaller .scrollable}

::: {.columns}

::: {.column width="65%"}

```{r}
#| echo: false
cat("# A tibble: 4 x 16")
statsci |> 
  select(1:10) |> 
  as.data.frame()
```

::: {.task .fragment}
Pivot the `statsci` data frame *longer* such that each row represents a degree type / year combination.

`year` and `n`umber of graduates for that year are columns in the result data frame.
:::

:::

::: {.column width="5%"}
$$ \to $$
:::


::: {.column width="30%"}


```{r}
#| echo: false
cat("# A tibble: 60 x 3")
print(statsci |>
        pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric) |>
      slice_head(n = 17) |>
        as.data.frame())
```
::: 
:::


## `pivot_longer()` {.smaller .scrollable}

::: {.columns}

::: {.column width="65%"}

```{r}
#| echo: false
cat("# A tibble: 4 x 16")
statsci |> 
  select(1:10) |> 
  as.data.frame()
```

::: {.task .fragment}
```{r}
#| eval: false

statsci |>
  pivot_longer(
    
    cols = ___________________ ,
    
    names_to = _______________ ,
    
    values_to = ______________
  )
```

:::

:::

::: {.column width="5%"}
$$ \to $$
:::


::: {.column width="30%"}


```{r}
#| echo: false
cat("# A tibble: 60 x 3")
print(statsci |>
        pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric) |>
      slice_head(n = 17) |>
        as.data.frame())
```
::: 
:::


## `year` {.smaller}

::: {.columns}


::: {.column width="50%"}
```{r}
statsci |> 
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year"
  )
```

:::

::: {.column width="50%"}

::: question
What is the type of the `year` variable?
Why?
What should it be?
:::

::: {.fragment}
It's a character (`chr`) variable since the information came from the columns of the original data frame and R cannot know that these character strings represent years.


The variable type should be numeric.

::: 
:::
:::


## `pivot_longer()` again {.smaller .scrollable}

::: question
This time, also make sure `year` is a numerical variable in the resulting data frame.
:::

::: {.columns}

::: {.column width = "50%"}

```{r}
#| eval: false
statsci |>
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year"
  )
```

:::

::: {.column width = "50%" }

:::

:::

## `pivot_longer()` again {.smaller .scrollable}

::: question
This time, also make sure `year` is a numerical variable in the resulting data frame.
:::

::: {.columns}

::: {.column width = "50%"}

```{r}
#| eval: false
#| code-line-numbers: "|6"
statsci |>
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric
  )
```

:::

::: {.column width = "50%" .fragment}
```{r}
#| echo: false
statsci |>
  pivot_longer(
    cols = -degree_type,
    values_to = "n",
    names_to = "year",
    names_transform = as.numeric
  )
```
:::

:::

# Application exercise

## `{r} Goal: recreate this plot` {.smaller}

add image

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`*.

-   Work through the application exercise in class, and render, commit, and push your edits by the end of class.
:::

## Recap: pivoting {.smaller}

::: incremental
-   Data sets can't be labeled as *wide* or *long* but they can be made *wider* or *longer* for a certain analysis that requires a certain format
-   When pivoting longer, variable names that turn into values are characters by default. If you need them to be in another format, you need to explicitly make that transformation, which you can do so within the `pivot_longer()` function.
-   You can tweak a plot forever, but at some point the tweaks are likely not very productive. However, you should always be critical of defaults (however pretty they might be) and see if you can improve the plot to better portray your data / results / what you want to communicate.
:::
