---
title: "Exam 1 review"
subtitle: "Lecture 11"
date: "2025-09-30"
format: 
  revealjs: 
    output-file: 11-exam-1-review-slides.html
    footer: "[ðŸ”— sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    pdf-separate-fragments: true
    toc: false
  html: 
    code-link: true
filters: 
  - ../remove-fmt-skip.lua
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-08-age-gaps-import"
```

# Warm-up

## While you wait: Participate ðŸ“±ðŸ’» {.xsmall}

::: columns

::: {.column width="70%"}

::: wooclap

Why is this a bad visualization for the data from lab yesterday?

![](images/11/age-opinion.png)

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## Announcements

- Cheat sheet: 8.5x11, both sides, hand written or typed, any content you want, must be prepared by you

- Bring a pencil and eraser (youâ€™re allowed to use a pen, but you might not want to)

- Reminder: Academic dishonesty / Duke Community Standard

# From last time

## Finish up: `ae-08-durham-climate-factors`

::: appex
-   Go to your ae project in RStudio.

-   Open `ae-08-durham-climate-factors.qmd` and pick up at "Pivot".
:::

# Joins

```{r}
#| include: false
library(tidyverse)
```

## Setup {.smaller}

::: {.columns}

::: {.column width="55%"}

```{r}
# fmt: skip
students <- tribble(
  ~student_id, ~name,  ~major,
  "S001",      "Abby", "History",
  "S002",      "Jinu", "Mathematics",
  "S003",      "Mira", "Political Science",
  "S004",      "Rumi", "Statistical Science",
  "S005",      "Zoey", "Computer Science"
)
```

:::

::: {.column width="45%"}

```{r}
# fmt: skip
enrollments <- tribble(
  ~sid,   ~course,
  "S003", "POLSCI 175",
  "S003", "STA 199",
  "S003", "RELIGION 228",
  "S004", "CS 201",
  "S004", "STA 240",
  "S004", "STA 221",
  "S004", "THEATRST 202",
  "S005", "CS 201",
  "S005", "STA 199",
  "S005", "RELIGION 228",
  "S005", "THEATRST 202"
)
```

:::

::: 

## Participate ðŸ“±ðŸ’» {.xsmall}

::: columns

::: {.column width="70%"}

::: wooclap

What goes in the blank to get to find the courses that all `students` are enrolled in?

```{r}
#| eval: false
students |>
  [BLANK](enrollments, by = join_by(student_id == sid))
```

::: wooclap-options
-  `anti_join`
-  `full_join`
-  `inner_join`
-  `left_join`
-  `right_join`
:::

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## What type of join?

::: question
Which type of join would you use to find the courses that all `students` are enrolled in?
:::

. . .

```{r}
students |>
  left_join(enrollments, by = join_by(student_id == sid))
```

## What type of join?

::: question
Which type of join would you use to find the `students` for whom we have enrollment information?
:::

. . .

```{r}
students |>
  inner_join(enrollments, by = join_by(student_id == sid))
```

## What type of join?

::: question
Which type of join would you use to find the `students` for whom we have no enrollment information?
:::

. . .

```{r}
students |>
  anti_join(enrollments, by = join_by(student_id == sid))
```

# `if_else()` / `case_when()`

## Collecting data {.smaller}

::: question
Suppose you conduct a survey and ask students their student ID number and number of credits they're taking this semester.
What is the type of each variable?
:::

. . .

```{r}
#| code-line-numbers: "|2|3"
survey_raw <- tibble(
  student_id = c(273674, 298765, 287129, "I don't remember"),
  n_credits = c(4, 4.5, "I'm not sure yet", "2 - underloading")
)
survey_raw
```

## Cleaning data {.smaller}

```{r}
#| code-line-numbers: "|2|3|4-8|9"
survey <- survey_raw |>
  mutate(
    student_id = if_else(student_id == "I don't remember", NA, student_id),
    n_credits = case_when(
      n_credits == "I'm not sure yet" ~ NA,
      n_credits == "2 - underloading" ~ "2",
      .default = n_credits
    ),
    n_credits = as.numeric(n_credits)
  )
survey
```

## Type coercion

::: incremental
-   If variables in a data frame have multiple types of values, R will coerce them into a single type, which may or may not be what you want.

-   If what R does by default is not what you want, you can use explicit coercion functions like `as.numeric()`, `as.character()`, etc. to turn them into the types you want them to be, which will generally also involve cleaning up the features of the data that caused the unwanted implicit coercion in the first place.
:::

# Aesthetic mappings

## `openintro::loan50`

```{r}
#| message: false
library(openintro)
library(ggthemes)
```

```{r}
loan50 |>
  select(annual_income, interest_rate, homeownership)
```

## Aesthetic mappings

::: question
What will the following code result in?
:::

```{r}
#| label: mapping
#| output-location: slide
ggplot(
  loan50,
  aes(
    x = annual_income,
    y = interest_rate,
    color = homeownership,
    shape = homeownership
  )
) +
  geom_point() +
  scale_color_colorblind()
```

## Global mappings

::: question
What will the following code result in?
:::

```{r}
#| label: global-mapping
#| output-location: slide
ggplot(
  loan50,
  aes(
    x = annual_income,
    y = interest_rate,
    color = homeownership,
    shape = homeownership
  )
) +
  geom_point() +
  geom_smooth(method = "lm", se = FALSE) +
  scale_color_colorblind()
```

## Local mappings

::: question
What will the following code result in?
:::

```{r}
#| label: mapping-local
#| output-location: slide
ggplot(
  loan50,
  aes(x = annual_income, y = interest_rate)
) +
  geom_point(aes(color = homeownership)) +
  geom_smooth(method = "lm", se = FALSE) +
  scale_color_colorblind()
```

## Mapping vs. setting

::: question
What will the following code result in?
:::

```{r}
#| label: mapping-setting
#| output-location: slide
ggplot(
  loan50,
  aes(x = annual_income, y = interest_rate)
) +
  geom_point(aes(color = homeownership)) +
  geom_smooth(method = "lm", color = "red", se = FALSE) +
  scale_color_colorblind()
```

## Recap: Aesthetic mappings

::: incremental
-   Aesthetic mapping defined at the *global* level will be used by all `geom`s for which the aesthetic is defined.

-   Aesthetic mapping defined at the *local* level will be used only by the `geom`s they're defined for.
:::

## Aside: Legends

```{r}
#| fig-width: 8
#| fig-asp: 0.5
#| output-location: column
ggplot(
  loan50,
  aes(
    x = annual_income,
    y = interest_rate,
    color = homeownership,
    shape = homeownership
  )
) +
  geom_point() +
  scale_color_colorblind()
```

## Aside: Legends {.smaller}

```{r}
#| fig-width: 8
#| fig-asp: 0.5
#| code-line-numbers: "|12"
#| output-location: column
ggplot(
  loan50,
  aes(
    x = annual_income,
    y = interest_rate,
    color = homeownership,
    shape = homeownership
  )
) +
  geom_point() +
  scale_color_colorblind() +
  labs(color = "Home ownership")
```

## Aside: Legends {.smaller}

```{r}
#| fig-width: 8
#| fig-asp: 0.5
#| code-line-numbers: "|13-14"
#| output-location: column
ggplot(
  loan50,
  aes(
    x = annual_income,
    y = interest_rate,
    color = homeownership,
    shape = homeownership
  )
) +
  geom_point() +
  scale_color_colorblind() +
  labs(
    color = "Home ownership",
    shape = "Home ownership"
  )
```

# Factors

## Factors

-   Factors are used for categorical variables -- variables that have a fixed and known set of possible values.

-   They are also useful when you want to display character vectors in a non-alphabetical order.

::: aside
R4DS: <https://r4ds.hadley.nz/factors>.
:::

## Bar plot

```{r}
ggplot(loan50, aes(x = homeownership)) +
  geom_bar()
```

## Bar plot - reordered {.smaller}

```{r}
loan50 |>
  mutate(
    homeownership = fct_relevel(homeownership, "mortgage", "rent", "own")
  ) |>
  ggplot(aes(x = homeownership)) +
  geom_bar()
```

## Frequency table

```{r}
loan50 |>
  count(homeownership)
```

## Bar plot - reordered {.smaller}

```{r}
loan50 |>
  mutate(
    homeownership = fct_relevel(homeownership, "own", "rent", "mortgage")
  ) |>
  count(homeownership)
```

## Under the hood

```{r}
class(loan50$homeownership)
```

. . .

```{r}
typeof(loan50$homeownership)
```

. . .

```{r}
levels(loan50$homeownership)
```

## Recap: Factors

::: incremental
-   The **forcats** package has a bunch of functions (that start with `fct_*()`) for dealing with factors and their levels: <https://forcats.tidyverse.org/reference/index.html>

-   Factors and the order of their levels are relevant for displays (tables, plots) and they'll be relevant for modeling (later in the course)

-   `factor` is a data **class**
:::

## Aside: `==`

```{r}
loan50 |>
  mutate(
    homeownership_new = if_else(
      homeownership == "rent",
      "don't own",
      homeownership
    )
  ) |>
  distinct(homeownership, homeownership_new)
```

## Aside: `|`

```{r}
loan50 |>
  mutate(
    homeownership_new = if_else(
      homeownership == "rent" | homeownership == "mortgage",
      "don't own",
      homeownership
    )
  ) |>
  distinct(homeownership, homeownership_new)
```

## Aside: `%in%`

```{r}
loan50 |>
  mutate(
    homeownership_new = if_else(
      homeownership %in% c("rent", "mortgage"),
      "don't own",
      homeownership
    )
  ) |>
  distinct(homeownership, homeownership_new)
```

# Other questions?
   