---
title: "Web scraping<br>a single page"
subtitle: "Lecture 12"
date: "2025-10-07"
format: 
  revealjs: 
    output-file: 12-web-scraping-single-page-slides.html
    footer: "[üîó sta199-f25.github.io](https://sta199-f25.github.io/)"
    theme: slides.scss
    transition: fade
    slide-number: true
    logo: images/logo.png
    pdf-separate-fragments: true
    toc: false
  html: 
    code-link: true
filters: 
  - ../remove-fmt-skip.lua
editor_options: 
  chunk_output_type: console
---

```{r}
#| label: setup
#| include: false
ggplot2::theme_set(ggplot2::theme_gray(base_size = 24))
todays_ae <- "ae-09-chronicle-scrape"
```

# Warm-up

## While you wait: Participate üì±üíª {.xsmall}

::: columns

::: {.column width="70%"}

::: wooclap

Guess: What is this plot about?

![](images/12/chronicle-sentiments-cropped.png)

**Then, make sure you have a Chrome browser and the SelectorGadget extension installed.**

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## Announcements {.smaller}

- Exam 1: Well done!
  - In-class exam scores will be posted by Friday morning, you can see your exams in my office hours on Friday
  - Take-home exam scores + feedback will be posted after fall break

. . .

- **New exam grade policy:** For students who take all exams (Exam 1, Exam 2, and Final Exam), the final exam score will replace the lower of the two mid-semester exam scores, if the final exam score is higher.

. . .

- Midsemester course survey:
  - Optional and anonymous, but super helpful!
  - Available till Thursday night on Canvas

## Project {.smaller}

<https://sta199-f25.github.io/project/description.html>

- Take note of the milestones and deadlines
  - Milestone 1: If you missed it, check your email for a make-up.
  - There will be no make-ups for future milestones

- Start thinking about your project idea and potential data sources, Milestone 2 due after Fall break

- Teamwork: 
  - Review the expectations and guidelines at the description above
  - Take note of peer evaluation due dates (first one due with Milestone 2) and look out for emails from TEAMMATES
  - Peer evaluation policy: You cannot receive the points your teammates have allocated to you if you do not fill out the peer evaluation yourself


# Data on the web

## Participate üì±üíª {.xsmall}

::: columns

::: {.column width="70%"}

::: wooclap

How often do you read The Chronicle?

::: wooclap-options
-   Every day
-   3-5 times a week
-   Once a week
-   Rarely
:::

:::

:::

::: {.column width="30%"}
{{< include _wooclap-column.qmd >}}
:::

:::

## Reading The Chronicle

::: question
What do you think is the most common word in the titles of The Chronicle opinion pieces?
:::

## Analyzing The Chronicle

```{r}
#| label: load-chronicle-data
#| include: false
library(tidyverse)
chronicle <- read_csv("data/chronicle.csv")
```

```{r}
#| label: chronicle-common-words
#| echo: false
#| message: false
stop_words <- read_csv("data/stop-words.csv")
chronicle |>
  tidytext::unnest_tokens(word, title) |>
  mutate(word = str_replace_all(word, "‚Äô", "'")) |>
  anti_join(stop_words) |>
  count(word, sort = TRUE) |>
  filter(word != "duke's") |>
  slice_head(n = 20) |>
  mutate(word = fct_reorder(word, n)) |>
  ggplot(aes(y = word, x = n, fill = log(n))) +
  geom_col(show.legend = FALSE) +
  theme_minimal(base_size = 16) +
  labs(
    x = "Number of mentions",
    y = "Word",
    title = "The Chronicle - Opinion pieces",
    subtitle = "Common words in the 500 most recent opinion piece titles",
    caption = "Source: Data scraped from The Chronicle on Oct 6, 2025"
  ) +
  theme(
    plot.title.position = "plot",
    plot.caption = element_text(color = "gray30")
  )
```

## Reading The Chronicle

::: question
How do you think the sentiments in opinion pieces in The Chronicle compare across authors?
Roughly the same?
Wildly different?
Somewhere in between?
:::

## Analyzing The Chronicle

```{r}
#| label: chronicle-sentiments
#| echo: false
#| message: false
#| fig-asp: 0.75
#| fig-width: 7
#| fig-align: center
afinn_sentiments <- read_csv("data/afinn-sentiments.csv")
chronicle |>
  tidytext::unnest_tokens(word, title, drop = FALSE) |>
  mutate(word = str_replace_all(word, "‚Äô", "'")) |>
  anti_join(stop_words) |>
  left_join(afinn_sentiments) |>
  group_by(author, title) |>
  summarize(total_sentiment = sum(value, na.rm = TRUE), .groups = "drop") |>
  group_by(author) |>
  summarize(
    n_articles = n(),
    avg_sentiment = mean(total_sentiment, na.rm = TRUE),
  ) |>
  filter(n_articles > 2 & !is.na(author)) |>
  arrange(desc(avg_sentiment)) |>
  slice(c(1:10, 30:39)) |>
  mutate(
    author = fct_reorder(author, avg_sentiment),
    neg_pos = if_else(avg_sentiment < 0, "neg", "pos"),
    label_position = if_else(neg_pos == "neg", 0.25, -0.25)
  ) |>
  ggplot(aes(y = author, x = avg_sentiment)) +
  geom_col(aes(fill = neg_pos), show.legend = FALSE) +
  geom_text(
    aes(x = label_position, label = author, color = neg_pos),
    hjust = c(rep(1, 10), rep(0, 10)),
    show.legend = FALSE,
    fontface = "bold"
  ) +
  geom_text(
    aes(label = round(avg_sentiment, 1)),
    hjust = c(rep(1.25, 10), rep(-0.25, 10)),
    color = "white",
    fontface = "bold"
  ) +
  scale_fill_manual(values = c("neg" = "#4d4009", "pos" = "#FF4B91")) +
  scale_color_manual(values = c("neg" = "#4d4009", "pos" = "#FF4B91")) +
  coord_cartesian(xlim = c(-2, 2)) +
  labs(
    x = "negative  ‚Üê     Average sentiment score (AFINN)     ‚Üí  positive",
    y = NULL,
    title = "The Chronicle - Opinion pieces\nAverage sentiment scores of titles by author",
    subtitle = "Top 10 average positive and negative scores",
    caption = "Source: Data scraped from The Chronicle on Sep 30, 2024"
  ) +
  theme_void(base_size = 16) +
  theme(
    plot.title = element_text(hjust = 0.5),
    plot.subtitle = element_text(
      hjust = 0.5,
      margin = unit(c(0.5, 0, 1, 0), "lines")
    ),
    axis.title.x = element_text(color = "gray30", size = 12),
    plot.caption = element_text(color = "gray30", size = 10)
  )
```

## All of this analysis is done in R! {.centered}

::: hand
(mostly) with tools you already know!
:::

## Common words in The Chronicle titles {.smaller}

Code for the earlier plot:

```{r}
#| ref.label: chronicle-common-words
#| fig-show: hide
#| message: false
#| code-line-numbers: "|2-3|5|6|8|9|10-23"
```

## Avg sentiment scores of titles {.smaller}

Code for the earlier plot:

```{r}
#| ref.label: chronicle-sentiments
#| fig-show: hide
#| message: false
#| code-line-numbers: "|2-3|5|6|7-8|9-13|22-55"
```

## Where is the data coming from? {.smaller}

::: center
<https://www.dukechronicle.com/section/opinion>
:::

[![](images/12/chronicle-opinion-page.png){fig-align="center" width="800"}](https://www.dukechronicle.com/section/opinion?page=1&per_page=500)

## Where is the data coming from? {.smaller}

::::: columns
::: {.column width="20%"}
[![](images/12/chronicle-opinion-page.png){fig-align="center" width="800"}](https://www.dukechronicle.com/section/opinion?page=1&per_page=500)
:::

::: {.column width="80%"}

```{r}
chronicle
```

:::
:::::

# Web scraping

## Scraping the web: what? why? {.smaller}

-   Increasing amount of data is available on the web

-   These data are provided in an unstructured format: you can always copy&paste, but it's time-consuming and prone to errors

-   Web scraping is the process of extracting this information automatically and transform it into a structured dataset

-   Two different scenarios:

    -   Screen scraping: extract data from source code of website, with html parser (easy) or regular expression matching (less easy).

    -   Web APIs (application programming interface): website offers a set of structured http requests that return JSON or XML files.

## Hypertext Markup Language {.smaller}

Most of the data on the web is still largely available as HTML - while it is structured (hierarchical) it often is not available in a form useful for analysis (flat / tidy).

::: small
``` html
<html>
  <head>
    <title>This is a title</title>
  </head>
  <body>
    <p align="center">Hello world!</p>
    <br/>
    <div class="name" id="first">John</div>
    <div class="name" id="last">Doe</div>
    <div class="contact">
      <div class="home">555-555-1234</div>
      <div class="home">555-555-2345</div>
      <div class="work">555-555-9999</div>
      <div class="fax">555-555-8888</div>
    </div>
  </body>
</html>
```
:::

## rvest {.smaller}

::::: columns
::: {.column width="50%"}
-   The **rvest** package makes basic processing and manipulation of HTML data straight forward
-   It's designed to work with pipelines built with `|>`
-   [rvest.tidyverse.org](https://rvest.tidyverse.org)

```{r}
#| message: false
library(rvest)
```

:::

::: {.column width="50%"}
[![](images/12/rvest.png){fig-alt="rvest hex logo" fig-align="right" width="400"}](https://rvest.tidyverse.org/)
:::
:::::

## rvest {.smaller}

Core functions:

-   `read_html()` - read HTML data from a url or character string.

-   `html_elements()` - select specified elements from the HTML document using CSS selectors (or xpath).

-   `html_element()` - select a single element from the HTML document using CSS selectors (or xpath).

-   `html_table()` - parse an HTML table into a data frame.

-   `html_text()` / `html_text2()` - extract tag's text content.

-   `html_name` - extract a tag/element's name(s).

-   `html_attrs` - extract all attributes.

-   `html_attr` - extract attribute value(s) by name.

## html, rvest, & xml2 {.smaller}

```{r}
html <-
  '<html>
  <head>
    <title>This is a title</title>
  </head>
  <body>
    <p align="center">Hello world!</p>
    <br/>
    <div class="name" id="first">John</div>
    <div class="name" id="last">Doe</div>
    <div class="contact">
      <div class="home">555-555-1234</div>
      <div class="home">555-555-2345</div>
      <div class="work">555-555-9999</div>
      <div class="fax">555-555-8888</div>
    </div>
  </body>
</html>'
```

. . .

```{r}
read_html(html)
```

## Selecting elements {.smaller}

```{r}
read_html(html) |> html_elements("p")
```

. . .

```{r}
read_html(html) |> html_elements("p") |> html_text()
```

. . .

```{r}
read_html(html) |> html_elements("p") |> html_name()
```

. . .

```{r}
read_html(html) |> html_elements("p") |> html_attrs()
```

. . .

```{r}
read_html(html) |> html_elements("p") |> html_attr("align")
```

## More selecting tags {.smaller}

::: medium

```{r}
read_html(html) |> html_elements("div")
```

:::

. . .

::: medium

```{r}
read_html(html) |> html_elements("div") |> html_text()
```

:::

## CSS selectors {.smaller}

-   We will use a tool called SelectorGadget to help us identify the HTML elements of interest by constructing a CSS selector which can be used to subset the HTML document.

. . .

-   Some examples of basic selector syntax is below,

::: small
| Selector | Example | Description |
|:-----------------|:-----------------|:-----------------------------------|
| .class | `.title` | Select all elements with class="title" |
| #id | `#name` | Select all elements with id="name" |
| element | `p` | Select all \<p\> elements |
| element element | `div p` | Select all \<p\> elements inside a \<div\> element |
| element\>element | `div > p` | Select all \<p\> elements with \<div\> as a parent |
| \[attribute\] | `[class]` | Select all elements with a class attribute |
| \[attribute=value\] | `[class=title]` | Select all elements with class="title" |
:::

## CSS classes and ids

```{r}
read_html(html) |> html_elements(".name")
```

. . .

```{r}
read_html(html) |> html_elements("div.name")
```

. . .

```{r}
read_html(html) |> html_elements("#first")
```

## Text with `html_text()` vs. `html_text2()` {.smaller}

```{r}
html = read_html(
  "<p>  
    This is the first sentence in the paragraph.
    This is the second sentence that should be on the same line as the first sentence.<br>This third sentence should start on a new line.
  </p>"
)
```

. . .

```{r}
html |> html_text()
html |> html_text2()
```

## HTML tables with `html_table()` {.smaller}

```{r}
html_table =
  '<html>
  <head>
    <title>This is a title</title>
  </head>
  <body>
    <table>
      <tr> <th>a</th> <th>b</th> <th>c</th> </tr>
      <tr> <td>1</td> <td>2</td> <td>3</td> </tr>
      <tr> <td>2</td> <td>3</td> <td>4</td> </tr>
      <tr> <td>3</td> <td>4</td> <td>5</td> </tr>
    </table>
  </body>
</html>'
```

. . .

```{r}
read_html(html_table) |>
  html_elements("table") |>
  html_table()
```

## SelectorGadget

**SelectorGadget** ([selectorgadget.com](http://selectorgadget.com)) is a javascript based tool that helps you interactively build an appropriate CSS selector for the content you are interested in.

![](images/12/selectorgadget.png){fig-align="center" width="1000"}

# Application exercise

## Opinion articles in The Chronicle

Go to <https://www.dukechronicle.com/section/opinion?page=1&per_page=500>.

::: question
How many articles are on the page?
:::

## Goal

::::: columns
::: {.column width="50%"}
-   Scrape data and organize it in a tidy format in R
-   Perform light text parsing to clean data
-   Summarize and visualze the data
:::

::: {.column width="50%"}
![](images/12/chronicle-data.png){fig-align="center"}
:::
:::::

## `{r} todays_ae` {.smaller}

::: appex
-   Go to your ae project in RStudio.

-   If you haven't yet done so, make sure all of your changes up to this point are committed and pushed, i.e., there's nothing left in your Git pane.

-   If you haven't yet done so, click Pull to get today's application exercise file: *`{r} paste0(todays_ae, ".qmd")`* and *`chronicle-scrape.R`*.
:::
